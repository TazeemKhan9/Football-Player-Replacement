# -*- coding: utf-8 -*-
"""SM PROJECT (K MEANS).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GTCFfFR6wM9f5WDy0lSTE1-h3rlXO16I

# BASIC GOALKEEPING
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn import preprocessing 
from sklearn import metrics
from scipy.spatial.distance import cdist
import scipy.cluster.hierarchy as shc

gk=pd.read_excel("https://github.com/TazeemKhan9/Football-Player-Replacement/blob/main/Original%20Data/BASIC%20GOALKEEPING%20STATS.xls.xlsx?raw=true")

"""**About the Data**
This data contains the basic stats for all goal-keepers in Europe's top 5 leagues. The notations for the stats are as follows:
 

1.   Rk -- Rank -- This is a count of the rows from top to bottom.
2.   Nation -- Nationality of the player.
3.   Pos -- Position of the player.
4.   Age -- Age at the season start for league play
5.   Born -- Year of birth
6.   MP -- Matches Played -- Matches Played by the player or squad
7.   Starts -- Starts -- Game or games started by player
8.   Min -- Minutes played by player
9.   GA -- Goals Against/Goals Conceded
10.  GA90 -- Goals Against per 90 minutes
11.  SoTA -- Shots on Target Against
12.  Save% -- Save Percentage --(Shots on Target Against - Goals Against)/Shots on Target Against
13.  PSxG -- Post-Shot Expected Goals --
PSxG is expected goals based on how likely the goalkeeper is to save the shot
14. PSxG/SoT -- Post-Shot Expected Goals per Shot on Target -- PSxG is expected goals based on how likely the goalkeeper is to save the shot
15. PSxG+/- -- Post-Shot Expected Goals minus Goals Allowed -- Positive numbers suggest better luck or an above average ability to stop shot
16. /90 -- Post-Shot Expected Goals minus Goals Allowed per 90 minutes
Positive numbers suggest better luck or an above average ability to stop shots
17. W -- Wins
18.  D -- Draws
19.  L -- Losses
20.  CS -- Clean Sheets -- Full matches by goalkeeper where no goals are allowed.
21.  CS% -- Clean Sheet Percentage -- Percentage of matches that result in clean sheets.
22.  PKatt -- Penalty Kicks Attempted
23.  PKA -- Penalty Kicks Allowed
24.  PKsv -- Penalty Kicks Saved
25.  PKm -- Penalty Kicks Missed
"""

gk ## Drop RK,Born,MP,Starts,GA,SoTA,Saves,W,D,L,CS,PKatt,PKsv,PKm

"""**Pre-Processing**


*   Using the second part of Nations
*   Creating a column for shots on target against per 90 mins
*   Creating a column for Penalty Save %
*   Converting Age into object
*   Dropping redundant columns
*   Selecting only Players who have played 10 matches or more
"""

gk['Player'] = gk['Player'].str.split('\\', expand=True)[0]

gk['Nation'] = gk['Nation'].str.split(' ', expand=True)[1]

gk['SoTA/90']=gk['SoTA']/gk['MP'] ## Shots on target against per 90 mins

gk["Age"] = gk["Age"].astype(str)

gk["Value_num"] = gk["Value_num"].astype(str)

gk_new=gk.drop(['Rk','Born','MP','Starts','GA','SoTA','Saves','W','D','L','CS','PKatt','PKsv','PKm','PKA','Expected.PSxG','Expected.PSxG/SoT','Expected.PSxG+/-','Crosses.Opp','Crosses.Stp','Crosses.Stp%'],axis=1)

gk_new=gk_new[gk_new['Min'] >=900]

gk_new=gk_new.drop('Min',axis=1)

gk_new.reset_index(drop=True,inplace=True)

gk_new

"""**Standardizing the Data**"""

scale = preprocessing.StandardScaler()

scaler = preprocessing.MinMaxScaler()

num_cols=gk_new.select_dtypes([np.number]).columns

x=gk_new[num_cols]

x=x.fillna(0)

x_scaled = scaler.fit_transform(x)

X= pd.DataFrame(x_scaled)

X

"""**Doing PCA to reduce dimensions and to eliminate Multicollinearity**"""

pca=PCA()

reduced=pd.DataFrame(pca.fit_transform(X))

var=pca.explained_variance_ratio_.cumsum()

var

pca = PCA(n_components = 2) # 2D PCA for the plot

reduced_gk = pd.DataFrame(pca.fit_transform(X))

reduced_gk

"""**Dendogram to decide number of clusters**"""

plt.figure(figsize=(10, 7))
plt.title("Dendrograms")  
dend = shc.dendrogram(shc.linkage(reduced, method='ward'))

"""**Creating a plot for elbow method to see number of clusters required**"""

Sum_of_squared_distances = []
K = range(1,15)
for k in K:
    km = KMeans(n_clusters=k)
    km = km.fit(reduced)
    Sum_of_squared_distances.append(km.inertia_)
plt.plot(K, Sum_of_squared_distances, 'bx-')
plt.xlabel('k')
plt.ylabel('Sum_of_squared_distances')
plt.title('Elbow Method For Optimal k')
plt.show()

"""**Clustering the data into groups**"""

# specify the number of clusters

kmeans = KMeans(n_clusters=4 , random_state=3)

# fit the input data

kmeans = kmeans.fit(reduced_gk)

# get the cluster labels

labels = kmeans.predict(reduced_gk)

# centroid values

centroid = kmeans.cluster_centers_

# cluster values

clusters = kmeans.labels_.tolist()

"""**Making a new dataframe with our PCA components, Clusters and Player names**"""

reduced_gk['Basic_cluster'] = clusters

reduced_gk['name'] = gk_new['Player']

reduced_gk.columns = ['PC1', 'PC2','Cluster', 'Name']

reduced_gk

gk_new['Basic_Cluster']=clusters

gk_search=gk_new.sort_values('Basic_Cluster')

import plotly.express as px
fig = px.scatter(reduced_gk,x="PC1", y="PC2",color="Cluster",template="ggplot2", title="GK Basic",hover_data=reduced_gk,hover_name='Name')
fig.show()

"""**Sorting the data by Clusters**"""

gk_visual=gk_search.sort_values('Basic_Cluster')
gk_visual[gk_visual['Basic_Cluster']==0]

"""**Creating a dataframe which has average values of with clusters being the columns**"""

avg_gk=gk_visual[gk_visual['Basic_Cluster']==0].mean(axis=0)

avg_gk=pd.DataFrame(avg_gk)

gk_visual['Basic_Cluster']= gk_visual['Basic_Cluster'].astype(str)

cols=gk_visual.select_dtypes([np.number]).columns

gk_visual['Basic_Cluster']= gk_visual['Basic_Cluster'].astype(int)

avg_gk['Basic_Cluster 0']=gk_visual[gk_visual['Basic_Cluster']==0].mean(axis=0)

avg_gk['Basic_Cluster 1']=gk_visual[gk_visual['Basic_Cluster']==1].mean(axis=0)

avg_gk['Basic_Cluster 2']=gk_visual[gk_visual['Basic_Cluster']==2].mean(axis=0)

avg_gk['Basic_Cluster 3']=gk_visual[gk_visual['Basic_Cluster']==3].mean(axis=0)

avg_gk.drop(0,axis=1,inplace=True)

avg_gk=avg_gk.drop('Basic_Cluster',axis=0)

avg_gk

"""**Creating a dataframe which has standardized average of variables with clusters being the column**"""

heat=gk_visual[gk_visual['Basic_Cluster']==0].mean(axis=0)

heat=pd.DataFrame(heat)

gk_visual['Basic_Cluster']= gk_visual['Basic_Cluster'].astype(str)

cols=gk_visual.select_dtypes([np.number]).columns


gk_visual[cols]=(gk_visual[cols]-gk_visual[cols].min())/(gk_visual[cols].max()-gk_visual[cols].min())

gk_visual['Basic_Cluster']= gk_visual['Basic_Cluster'].astype(int)

heat['Cluster 0']=gk_visual[gk_visual['Basic_Cluster']==0].mean(axis=0)

heat['Cluster 1']=gk_visual[gk_visual['Basic_Cluster']==1].mean(axis=0)

heat['Cluster 2']=gk_visual[gk_visual['Basic_Cluster']==2].mean(axis=0)

heat['Cluster 3']=gk_visual[gk_visual['Basic_Cluster']==3].mean(axis=0)

heat.drop(0,axis=1,inplace=True)

heat=heat.drop('Basic_Cluster',axis=0)

gk_visual['Age']=gk_visual['Age'].astype(float)

gk_visual['Age']=gk_visual['Age'].astype(int)

gk_search['Age']=gk_search['Age'].astype(float)

gk_search['Age']=gk_search['Age'].astype(int)

gk_search['Value_num']=gk_search['Value_num'].astype(float)

gk_search['Value_num']=gk_search['Value_num'].astype(int)

#heat=heat.drop('Age',axis=0)

heat

"""**Plotting the standardized dataset to get a better insight into our clusters**"""

ax=sns.heatmap(heat,cmap="OrRd",annot=True,xticklabels=True,yticklabels=True)

ax.figure.savefig("output.png")

"""**ANALYSIS OF THE CLUSTERS**


1.   Cluster 3- These are the **World Class goalkeepers**. They concede the lowest number of goals on an average, have a high save % and clean sheet %. One thing is to notice is that they don't face a lot of shots but whenever they do, there is a high probability that they will save the shot. 
2.  Cluster 2- These are the **above average goalkeepers**. These keepers are facing higher number of shots than keepers in cluster 2 yet they are conceding nearly the same amount of goals. It is because they have a very high Save %. The clubs with the best keepers can have a look at this group of keepers as they have the potential to be part of the world class keepers.

3. Cluster 1- These are the **worst group of goalkeepers**. These goalkeepers are facing a lot of shots every match but they are not able to save them. They concede a lot of goals on an average and their clubs should look into replacing them. 

4.  Cluster 0- These are the **Underperforming keepers**. Even though they don't face a lot of shots on target per match, they concede goals every match. Even though their Clean sheet % is around average, their save % isn't impressive. These players can improve but there are certainly better keepers available.

**Implementation of the model in a Real World Scenario**
"""

def club(TeamName):
  return gk_search[gk_search['Squad'] == TeamName][['Player','Pos','Nation','League','Value','Value_num','Squad','Age','GA90','Save%','CS%','SoTA/90','Expected./90','Basic_Cluster']]

TeamName= input('Enter your team name : ')
club(TeamName)

def gk_replacement_basic(Player, age, value):
  
  cluster_number=int(gk_search[gk_search['Player']==Player]['Basic_Cluster'])
  
  if cluster_number==3:
  
    search_df= gk_search.query('(Basic_Cluster == 3 or Basic_Cluster == 2) and Age <= @age and Value_num <= @value' )
  
  elif cluster_number==2:
    search_df= gk_search.query('(Basic_Cluster == 3 or Basic_Cluster == 2) and Age <= @age and Value_num <= @value' )
    
  elif cluster_number==0:
    search_df= gk_search.query('(Basic_Cluster == 3 or Basic_Cluster == 2) and Age <= @age and Value_num <= @value')
    
  elif cluster_number==1:
    search_df= gk_search.query('(Basic_Cluster == 3 or Basic_Cluster == 2 or Basic_Cluster == 1) and Age < @age and Value_num <= @value' )
  return search_df

Player=input('Enter player to be replaced :')

Age=int(input('Enter the age of the player you want to buy:'))

Value=int(input('Enter the budget for the player you want to buy :'))

result_basic=gk_replacement_basic(Player,Age,Value)

result_basic.sort_values('Basic_Cluster',ascending=False)

result_basic['Basic_Cluster']=result_basic['Basic_Cluster'].replace(to_replace =[0,1,2,3],value =["Poor","Underperforming","Good","World Class"])

result_basic

"""# ADVANCE GOALKEEPING"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

gk_advance=pd.read_excel("https://github.com/TazeemKhan9/Football-Player-Replacement/blob/main/Original%20Data/Advance%20Goalkeeping.xlsx?raw=true")

"""**About the Data** This data contains the basic stats for all goal-keepers in Europe's top 5 leagues. The notations for the stats are as follows:
1. Rk -- Rank
2. Nation -- Nationality of the player.
3. Pos --  Position of the player on the field
4. Age -- Age at the season start for league play
5. Born -- Year of birth
6. Min -- Minutes played 
7. Launched.Cmp -- Passes Completed longer than 40 yards
8. Launched.Att -- Passes Attempted longer than 40 yards
9. Launched.Cmp% -- Pass Completion Percentage longer than 40 yards
10. Passes.Att -- Passes Attempted
11. Passes.Thr -- Throws Attempted
12. Passes.Launch% -- Percentage of Passes that were Launched  longer than 40 yards
13. Passes.AvgLen -- Average length of passes, in yards
14. Goal Kicks.Att -- Passes Attempted
15. Goal Kicks.Launch% -- Percentage of Goal Kicks that were Launched longer than 40 yards
16. Goal Kicks.AvgLen -- Average length of goal kicks, in yards
17. Sweeper.#OPA -- # of defensive actions outside of penalty area
18. Sweeper.#OPA/90 -- Defensive actions outside of penalty area per 90 minutes
19. Sweeper.AvgDist -- Average distance from goal to perform defensive actions
20. Total.Cmp -- Passes Completed
21. Total.Att -- Passes Attempted
22. Total.Cmp% -- Pass Completion Percentage
23. TotDist -- Total distance, in yards, that completed passes have traveled in any direction
24. PrgDist -- Progressive Distance -- 
Total distance, in yards, that completed passes have traveled towards the opponent's goal.
25. Short.Cmp -- Passes Completed -- Passes of fewer than 5 yards
26. Short.Att -- Passes Attempted --Passes of fewer than 5 yards
27. Short.Cmp% -- Pass Completion Percentage -- Passes of fewer than 5 yards
28. Medium.Cmp -- Passes Completed -- Passes between 5 and 25 yards
29. Medium.Att -- Passes Attempted -- Passes between 5 and 25 yards
30. Medium.Cmp% -- Pass Completion Percentage -- Passes between 5 and 25 yards
31. Long.Cmp -- Passes Completed -- Passes longer than 25 yards
32. Long.Att -- Passes Attempted -- Passes longer than 25 yards
33. Long.Cmp% -- Pass Completion Percentage -- Passes longer than 25 yards
"""

gk_advance

"""**Preprocessing the data**"""

gk_advance['Player'] = gk_advance['Player'].str.split('\\', expand=True)[0]

gk_advance["Age"] = gk_advance["Age"].astype(str)

gk_advance["Value_num"] = gk_advance["Value_num"].astype(str)

gk_advance_new=gk_advance.drop(['Rk','Born','Launched.Cmp','Launched.Att','Passes.Att','Passes.Thr','Goal Kicks.Att','Sweeper.#OPA/90','Sweeper.AvgDist','Sweeper.#OPA','Total.Cmp','Short.Cmp','Long.Cmp','Medium.Cmp','Long.Att','Long.Cmp%'],axis=1)

gk_advance_new=gk_advance_new[gk_advance_new['Min'] >=900]

gk_advance_new=gk_advance_new.drop('Min',axis=1)

gk_advance_new.reset_index(drop=True,inplace=True)

gk_advance_new

"""**Standardizing the data**"""

from sklearn import preprocessing

scale=preprocessing.StandardScaler()

scaler = preprocessing.MinMaxScaler()

cols=gk_advance_new.select_dtypes([np.number]).columns

x=gk_advance_new[cols]

x=x.fillna(0)

x_scaled = scaler.fit_transform(x)

X= pd.DataFrame(x_scaled)

"""**Performing PCA to remove collinearity**"""

from sklearn.decomposition import PCA

pca=PCA()

reduced=pd.DataFrame(pca.fit_transform(X))

var=pca.explained_variance_ratio_.cumsum()

var

from sklearn.decomposition import PCA

pca = PCA(n_components = 4) # 2D PCA for the plot

reduced = pd.DataFrame(pca.fit_transform(X))

reduced

"""**Selecting number of clusters using Dendogram**"""

plt.figure(figsize=(10, 7))  

plt.title("Dendrograms")  

dend = shc.dendrogram(shc.linkage(reduced, method='ward'))

"""**Using elbow method to select number of cluster**"""

Sum_of_squared_distances = []
K = range(1,15)
for k in K:
    km = KMeans(n_clusters=k)
    km = km.fit(reduced)
    Sum_of_squared_distances.append(km.inertia_)
plt.plot(K, Sum_of_squared_distances, 'bx-')
plt.xlabel('k')
plt.ylabel('Sum_of_squared_distances')
plt.title('Elbow Method For Optimal k')
plt.show()

"""**Performing clustering**"""

from sklearn.cluster import KMeans
# specify the number of clusters
kmeans = KMeans(n_clusters=3,random_state=2)
# fit the input data
kmeans = kmeans.fit(reduced)
# get the cluster labels
labels = kmeans.predict(reduced)
# centroid values
centroid = kmeans.cluster_centers_
#cluster values
adv_clusters = kmeans.labels_.tolist()

reduced['Advance_Cluster'] = adv_clusters
reduced['name'] = gk_advance_new['Player']
reduced.columns = ['PC1','PC2','PC3','PC4','Cluster', 'Name']
reduced
gk_advance_new['Advance_Cluster']=adv_clusters
gk_advance_search=gk_advance_new.sort_values('Advance_Cluster')

gk_advance_search

"""**Plotting our Clusters**"""

import matplotlib as mpl 
import matplotlib.pyplot as plt 
import matplotlib.gridspec as gridspec 
import matplotlib.patheffects as path_effects

#Selecting Team
title_font = "Alegreya Sans"
body_font = "Open Sans"
text_color = "w"
background = "#313332"
filler = "grey"
primary = "red"


fig, ax = plt.subplots(figsize=(20,20))
fig.set_facecolor(background)
ax.patch.set_facecolor(background)

ax.grid()

x = reduced.PC1
y = reduced.PC2
txt = reduced.name
ax.scatter(x,y,s=120,c=adv_clusters,cmap='Spectral')
ax.annotate
fig.text(0.15,0.91,"Goalkeeping Passing Stats",fontweight="bold",fontsize=22, fontfamily=title_font,color=text_color)

fig.text(0.15,0.89,"Top 5 European Leagues",fontweight="regular", fontsize=18,fontfamily=title_font, color=text_color)

for i, txt in enumerate(txt):
    ax.annotate(txt, (x[i], y[i]),color=text_color)

ax.set_xlabel("PC1", fontfamily=title_font, fontweight="bold", fontsize=12, color=text_color)
ax.set_ylabel("PC2", fontfamily=title_font, fontweight="bold", fontsize= 12, color=text_color)

plt.show()

gk_advance_visual=gk_advance_search.sort_values('Advance_Cluster')
gk_advance_visual[gk_advance_visual['Advance_Cluster']==0]

avg_gk_advance=gk_advance_visual[gk_advance_visual['Advance_Cluster']==0].mean(axis=0)

avg_gk_advance=pd.DataFrame(avg_gk_advance)

gk_advance_visual['Advance_Cluster']= gk_advance_visual['Advance_Cluster'].astype(str)

cols=gk_advance_visual.select_dtypes([np.number]).columns

gk_advance_visual['Advance_Cluster']= gk_advance_visual['Advance_Cluster'].astype(int)

avg_gk_advance['Advance_Cluster 0']=gk_advance_visual[gk_advance_visual['Advance_Cluster']==0].mean(axis=0)

avg_gk_advance['Advance_Cluster 1']=gk_advance_visual[gk_advance_visual['Advance_Cluster']==1].mean(axis=0)

avg_gk_advance['Advance_Cluster 2']=gk_advance_visual[gk_advance_visual['Advance_Cluster']==2].mean(axis=0)

avg_gk_advance.drop(0,axis=1,inplace=True)

avg_gk_advance=avg_gk_advance.drop('Advance_Cluster',axis=0)

avg_gk_advance

heat=gk_advance_visual[gk_advance_visual['Advance_Cluster']==0].mean(axis=0)

heat=pd.DataFrame(heat)

gk_advance_visual['Advance_Cluster']= gk_advance_visual['Advance_Cluster'].astype(str)

cols=gk_advance_visual.select_dtypes([np.number]).columns

gk_advance_visual[cols]=(gk_advance_visual[cols]-gk_advance_visual[cols].min())/(gk_advance_visual[cols].max()-gk_advance_visual[cols].min())

gk_advance_visual['Advance_Cluster']= gk_advance_visual['Advance_Cluster'].astype(int)

heat['Advance_Cluster 0']=gk_advance_visual[gk_advance_visual['Advance_Cluster']==0].mean(axis=0)

heat['Advance_Cluster 1']=gk_advance_visual[gk_advance_visual['Advance_Cluster']==1].mean(axis=0)

heat['Advance_Cluster 2']=gk_advance_visual[gk_advance_visual['Advance_Cluster']==2].mean(axis=0)

gk_advance_visual['Age']=gk_advance_visual['Age'].astype(float)

gk_advance_visual['Age']=gk_advance_visual['Age'].astype(int)

gk_advance_search['Age']=gk_advance_search['Age'].astype(float)

gk_advance_search['Age']=gk_advance_search['Age'].astype(int)

gk_advance_search['Value_num']=gk_advance_search['Value_num'].astype(float)

gk_advance_search['Value_num']=gk_advance_search['Value_num'].astype(int)

heat=heat.drop(0,axis=1)

heat=heat.drop('Advance_Cluster',axis=0)

heat

sns.heatmap(heat, cmap="BuGn")

"""**ANALYSIS OF THE CLUSTERS**


1.   Cluster 0 - **Ball playing goalkeeprs**. They tend to avoid Passing long balls but when they do they are very accurate comparitively. They have the best the overall pass % making them a reliable outlet from the back. Generally seen in teams who dominate possession.

2.  Cluster 1-  **Defensive Goalkeepers**. These goalkeepers tend to play long balls straight to the striker. They avoid playing short passes. Their pass completion rate is pretty low as making long passes is comparitively difficult. Generally seen in teams which don't have a lot of possession.

3.  Cluster 2- This set of Goalkeepers are a mixture of the above two. They have an average pass completion % and they play both short and long passes. They can play for any type of team as they are versatile in their passing range.
"""

def club(TeamName):
  return gk_advance_search[gk_advance_search['Squad'] == TeamName][['Player','Nation','Pos','Value','Value_num','Squad','League','Age','Launched.Cmp%','Passes.Launch%','Passes.AvgLen','Goal Kicks.Launch%','Goal Kicks.AvgLen','Total.Att','Total.Cmp%','Total.Dist','Total.PrgDist','Short.Att','Short.Cmp%','Medium.Att','Medium.Cmp%','Advance_Cluster']]

def gk_replacement_advance(Player, age, value):
  
  Advance_Cluster_number=int(gk_advance_search[gk_advance_search['Player']==Player]['Advance_Cluster'])
  
  if Advance_Cluster_number==0:
  
    search_df= gk_advance_search.query('Advance_Cluster == 0 and Age <= @age and Value_num <= @value' )
  
  elif Advance_Cluster_number==1:
  
    search_df= gk_advance_search.query('Advance_Cluster == 1 and Age <= @age and Value_num <= @value' )
    
  elif Advance_Cluster_number==2:
  
    search_df= gk_advance_search.query('Advance_Cluster == 2 and Age <= @age and Value_num <= @value' )
  
  return search_df

result_advance=gk_replacement_advance(Player,Age,Value)

result_advance.sort_values('Advance_Cluster',ascending=False)

result_advance.drop(['Nation','Value','Value_num','Pos','Squad','League','Age'],inplace=True,axis=1)

result_advance['Advance_Cluster']=result_advance['Advance_Cluster'].replace(to_replace =[0,1,2],value =["Ball Playing","Defensive","Mix"])

output_df = pd.merge(result_basic,result_advance, how='inner', on='Player')

output_df

output_df[['Player','Nation','Pos','Value','Value_num','Squad','Age','Basic_Cluster','Advance_Cluster']]

"""# CENTREBACK DATA"""

defending_data=pd.read_excel("https://github.com/TazeemKhan9/Football-Player-Replacement/blob/main/Original%20Data/Defending%20Data.xlsx?raw=true")

defending_data

defending_data["Age"] = defending_data["Age"].astype(str)

defending_data["Value_Num"] = defending_data["Value_Num"].astype(str)

defending_data['Tkl_Win%']=defending_data['TklW/90']/defending_data['Tkl/90']

defending_data=defending_data.drop(['Rk','Nation','Born','Tkl_Mid 3rd/90','Tkl_Att 3rd/90','Tkl_Vs_Dribblers/90','Tkl_Vs_Dribblers_Att/90','Pressures/90','Succ_Presures/90','Pressures_Mid_3rd/90','Pressures_Att_3rd/90'	,'Blocks_Vs_SoT/90','Blocks_Vs_Pass/90','Tkl+Int/90'],axis=1)

defending_data=defending_data[defending_data['90s'] >=10]

centre_back=defending_data[defending_data['Pos']=='CB']

centre_back=centre_back.drop('90s',axis=1)

#centre_back=centre_back.dropna() 

centre_back.reset_index(drop=True,inplace=True)

centre_back

from sklearn import preprocessing

scaler = preprocessing.MinMaxScaler()

cols=centre_back.select_dtypes([np.number]).columns

x=centre_back[cols]

x=x.fillna(0)

x_scaled = scaler.fit_transform(x)

X= pd.DataFrame(x_scaled)

X

from sklearn.decomposition import PCA

pca=PCA()

reduced=pd.DataFrame(pca.fit_transform(X))

var=pca.explained_variance_ratio_.cumsum()

var

from sklearn.decomposition import PCA

pca = PCA(n_components = 8) # 2D PCA for the plot

reduced_cb = pd.DataFrame(pca.fit_transform(X))

reduced_cb

plt.figure(figsize=(10, 7))  

plt.title("Dendrograms")  

dend = shc.dendrogram(shc.linkage(reduced_cb, method='ward'))

from sklearn.cluster import KMeans

sse = {}

for k in range(1, 10):

    kmeans = KMeans(n_clusters=k).fit(reduced)

    #reduced["clusters"] = kmeans.labels_

    #print(data["clusters"])

    sse[k] = kmeans.inertia_ # Inertia: Sum of distances of samples to their closest cluster center

plt.figure()

plt.plot(list(sse.keys()), list(sse.values()))

plt.xlabel("Number of cluster")

plt.ylabel("SSE")

plt.show()

from sklearn.cluster import KMeans
# specify the number of clusters

kmeans = KMeans(n_clusters=3,random_state=1)

# fit the input data

kmeans = kmeans.fit(reduced_cb)

# get the cluster labels

labels = kmeans.predict(reduced_cb)

# centroid values

centroid = kmeans.cluster_centers_

# cluster values

clusters = kmeans.labels_.tolist()

reduced_cb['cluster'] = clusters

reduced_cb['name'] = centre_back['Player']

reduced_cb.columns = ['PC1','PC2','PC3','PC4','PC5','PC6','PC7','PC8','Basic_Cluster','Name']

reduced_cb

centre_back['Basic_Cluster']=clusters

cb_search=centre_back.sort_values('Basic_Cluster')

import matplotlib as mpl 
import matplotlib.pyplot as plt 
import matplotlib.gridspec as gridspec 
import matplotlib.patheffects as path_effects

#Selecting Team
title_font = "Alegreya Sans"
body_font = "Open Sans"
text_color = "w"
background = "#313332"
filler = "grey"
primary = "red"


fig, ax = plt.subplots(figsize=(20,20))
fig.set_facecolor(background)
ax.patch.set_facecolor(background)

x = reduced_cb.PC1
y = reduced_cb.PC2
txt = reduced_cb.Name
scatter=ax.scatter(x,y,s=120,c=clusters,cmap='Spectral')

legend1 = ax.legend(*scatter.legend_elements(),
                    loc="upper right", title="Classes")
ax.add_artist(legend1)


ax.annotate
fig.text(0.15,0.91,"Goalkeeping Basic Stats",fontweight="bold",fontsize=22, fontfamily=title_font,color=text_color)

fig.text(0.15,0.89,"Top 5 European Leagues",fontweight="regular", fontsize=18,fontfamily=title_font, color=text_color)

#for i, txt in enumerate(txt):
#    ax.annotate(txt, (x[i], y[i]),color=text_color)

ax.set_xlabel("PC1", fontfamily=title_font, fontweight="bold", fontsize=12, color=text_color)
ax.set_ylabel("PC2", fontfamily=title_font, fontweight="bold", fontsize= 12, color=text_color)

plt.show()

cb_visual=cb_search.sort_values('Basic_Cluster')
cb_visual[cb_visual['Basic_Cluster']==2]

avg_cb=cb_visual[cb_visual['Basic_Cluster']==0].mean(axis=0)

avg_cb=pd.DataFrame(avg_cb)

cb_visual['Basic_Cluster']= cb_visual['Basic_Cluster'].astype(str)

cols=cb_visual.select_dtypes([np.number]).columns

cb_visual['Basic_Cluster']= cb_visual['Basic_Cluster'].astype(int)

avg_cb['Basic_Cluster 0']=cb_visual[cb_visual['Basic_Cluster']==0].mean(axis=0)

avg_cb['Basic_Cluster 1']=cb_visual[cb_visual['Basic_Cluster']==1].mean(axis=0)

avg_cb['Basic_Cluster 2']=cb_visual[cb_visual['Basic_Cluster']==2].mean(axis=0)

#avg_cb['Basic_Cluster 3']=cb_visual[cb_visual['Basic_Cluster']==3].mean(axis=0)

#avg_cb['Basic_Cluster 4']=cb_visual[cb_visual['Basic_Cluster']==4].mean(axis=0)


avg_cb.drop(0,axis=1,inplace=True)

avg_cb=avg_cb.drop('Basic_Cluster',axis=0)

avg_cb

heat=cb_visual[cb_visual['Basic_Cluster']==0].mean(axis=0)

heat=pd.DataFrame(heat)

cb_visual['Basic_Cluster']= cb_visual['Basic_Cluster'].astype(str)

cols=cb_visual.select_dtypes([np.number]).columns


cb_visual[cols]=(cb_visual[cols]-cb_visual[cols].min())/(cb_visual[cols].max()-cb_visual[cols].min())

cb_visual['Basic_Cluster']= cb_visual['Basic_Cluster'].astype(int)

heat['Cluster 0']=cb_visual[cb_visual['Basic_Cluster']==0].mean(axis=0)

heat['Cluster 1']=cb_visual[cb_visual['Basic_Cluster']==1].mean(axis=0)

heat['Cluster 2']=cb_visual[cb_visual['Basic_Cluster']==2].mean(axis=0)

#heat['Cluster 3']=cb_visual[cb_visual['Basic_Cluster']==3].mean(axis=0)

#heat['Cluster 4']=cb_visual[cb_visual['Basic_Cluster']==4].mean(axis=0)


heat.drop(0,axis=1,inplace=True)

heat=heat.drop('Basic_Cluster',axis=0)

cb_visual['Age']=cb_visual['Age'].astype(float)

cb_visual['Age']=cb_visual['Age'].astype(int)

cb_search['Age']=cb_search['Age'].astype(float)

cb_search['Age']=cb_search['Age'].astype(int)

cb_search['Value_Num']=cb_search['Value_Num'].astype(float)

cb_search['Value_Num']=cb_search['Value_Num'].astype(int)

#heat=heat.drop('Age',axis=0)

heat

import seaborn as sns
sns.heatmap(heat, cmap="BuGn")

"""**ANALYSIS OF THE CLUSTERS**


1.   Cluster 1 - **Ball Playing Centre-Back**. These centre backs have the lowest defensive numbers. Thier Tackle Win% and Successful pressures % are similar to other 2 even though they perform less number of tacklers and pressures. These centre-backs also don't get dribbled past easily so they are good One on One defender. Ideal for teams with high possession 

2.  Cluster 0-  **Sweeper Centre-Back**. These centre-back are the last line of defence. They perfrom less pressures compared to ball winning centre backs as they get out of the defense less . They have the highest number of clearences and blocks vs shots on target as their job is to dismantle a set play or to at least disrupt the attacker with the ball from executing a shot.

3.  Cluster 2-**Ball winning Centre-Back**.This type of defender excels in intercepting passes and through balls due to his excellent positioning and reading of the game. They have good tackling skills and  provides his defensive line with cover, especially useful when playing with a high defensive line as shown by thier high number of interceptions and tackles.
"""

def club(TeamName):
  return cb_search[cb_search['Squad'] == TeamName][['Player','Pos','Squad','Value','Value_Num','Age','Tkl_Def 3rd/90','Tkl%_Vs_Dribblers','Dribbled_Past/90','%_Succ_Pressures/90','Pressures_Def_3rd/90','Blocks/90','Blocks_Vs_Shots/90','Interceptions/90','Clearance/90','Errors/90','Basic_Cluster']]

TeamName= input('Enter your team name : ')
club(TeamName)

def Replacement_cb(Player, age, value):
  
  Basic_Cluster_number=int(cb_search[cb_search['Player']==Player]['Basic_Cluster'])
  
  if Basic_Cluster_number==0:
  
    search_df= cb_search.query('Basic_Cluster == 0 and Age <= @age and Value_Num <= @value' )
  
  elif Basic_Cluster_number==1:
  
    search_df= cb_search.query('Basic_Cluster == 1 and Age <= @age and Value_Num <= @value' )
    
  elif Basic_Cluster_number==2:
  
    search_df= cb_search.query('Basic_Cluster == 2 and Age <= @age and Value_Num <= @value' )
  
  return search_df

Player=input('Enter player to be replaced :')

Age=int(input('Enter the age of the player you want to buy:'))

Value=int(input('Enter the budget for the player you want to buy :'))

result_basic=Replacement_cb(Player,Age,Value)

result_basic.sort_values('Basic_Cluster',ascending=False)

result_basic

"""# **Centre back passing**"""

passing_data=pd.read_excel("https://github.com/TazeemKhan9/Football-Player-Replacement/blob/main/Original%20Data/Basic%20Passing.xlsx?raw=true")

passing_data

passing_data['Player'] =passing_data['Player'].str.split('\\', expand=True)[0]

passing_data["Age"] = passing_data["Age"].astype(str)

passing_data["Value_Num"] = passing_data["Value_Num"].astype(str)

passing_data['Short.Att%']=(passing_data['Short.Att']/passing_data['Total.Att'])*100

passing_data['Medium.Att%']=(passing_data['Medium.Att']/passing_data['Total.Att'])*100

passing_data['Long.Att%']=(passing_data['Long.Att']/passing_data['Total.Att'])*100

passing_data['Progressive%']=(passing_data['Prog']/passing_data['Total.Att'])*100

passing_data=passing_data.drop(['Rk','Born','Total.Cmp','Short.Cmp','Medium.Cmp','Long.Cmp','Short.Att','Medium.Att','Long.Att','Prog','Ast','xA','1/3rd','PPA','A-xA','KP','CrsPA'],axis=1)

passing_data=passing_data[passing_data['90s'] >=10]

passing_data=passing_data.drop('90s',axis=1)

cb_passing = passing_data[passing_data['Pos']=='CB']

cb_passing =cb_passing.dropna() 

cb_passing.reset_index(drop=True,inplace=True)

cb_passing

from sklearn import preprocessing

scaler = preprocessing.MinMaxScaler()

cols=cb_passing.select_dtypes([np.number]).columns

x=cb_passing[cols]

x=x.fillna(0)

x_scaled = scaler.fit_transform(x)

X= pd.DataFrame(x_scaled)

from sklearn.decomposition import PCA

pca=PCA()

reduced_cb_passing=pd.DataFrame(pca.fit_transform(X))

var=pca.explained_variance_ratio_.cumsum()

var

from sklearn.decomposition import PCA

pca = PCA(n_components = 5) # 2D PCA for the plot

reduced_cb_passing = pd.DataFrame(pca.fit_transform(X))

reduced_cb_passing

plt.figure(figsize=(10, 7))  
plt.title("Dendrograms")  
dend = shc.dendrogram(shc.linkage(reduced_cb_passing, method='ward'))

Sum_of_squared_distances = []
K = range(1,15)
for k in K:
    km = KMeans(n_clusters=k)
    km = km.fit(reduced_cb_passing)
    Sum_of_squared_distances.append(km.inertia_)
plt.plot(K, Sum_of_squared_distances, 'bx-')
plt.xlabel('k')
plt.ylabel('Sum_of_squared_distances')
plt.title('Elbow Method For Optimal k')
plt.show()

from sklearn.cluster import KMeans

# specify the number of clusters

kmeans = KMeans(n_clusters=3,random_state=2)

# fit the input data

kmeans = kmeans.fit(reduced_cb_passing)

# get the cluster labels

labels = kmeans.predict(reduced_cb_passing)

# centroid values

centroid = kmeans.cluster_centers_

#cluster values

adv_clusters = kmeans.labels_.tolist()

reduced_cb_passing['Advance_Cluster'] = adv_clusters

reduced_cb_passing['name'] =cb_passing['Player']

reduced_cb_passing.columns = ['PC1','PC2','PC3','PC4','PC5','Advance_Cluster', 'Name']

reduced_cb_passing

cb_passing['Advance_Cluster']=adv_clusters

cb_passing_search=cb_passing.sort_values('Advance_Cluster')

import matplotlib as mpl 
import matplotlib.pyplot as plt 
import matplotlib.gridspec as gridspec 
import matplotlib.patheffects as path_effects

#Selecting Team
title_font = "Alegreya Sans"
body_font = "Open Sans"
text_color = "w"
background = "#313332"
filler = "grey"
primary = "red"



fig, ax = plt.subplots(figsize=(20,20))
fig.set_facecolor(background)
ax.patch.set_facecolor(background)

ax.grid()

x = reduced_cb_passing.PC1
y = reduced_cb_passing.PC2
txt = reduced_cb_passing.Name
ax.scatter(x,y,s=120,c=adv_clusters,cmap='Spectral')

legend1 = ax.legend(*scatter.legend_elements(),
                    loc="upper right", title="Classes")
ax.add_artist(legend1)


ax.annotate
fig.text(0.15,0.91,"Goalkeeping Passing Stats",fontweight="bold",fontsize=22, fontfamily=title_font,color=text_color)

fig.text(0.15,0.89,"Top 5 European Leagues",fontweight="regular", fontsize=18,fontfamily=title_font, color=text_color)

#for i, txt in enumerate(txt):
    #ax.annotate(txt, (x[i], y[i]),color=text_color)

ax.set_xlabel("PC1", fontfamily=title_font, fontweight="bold", fontsize=12, color=text_color)
ax.set_ylabel("PC2", fontfamily=title_font, fontweight="bold", fontsize= 12, color=text_color)

plt.show()

cb_passing_visual=cb_passing_search.sort_values('Advance_Cluster')
cb_passing_visual[cb_passing_visual['Advance_Cluster']==1]

avg_cb_passing=cb_passing_visual[cb_passing_visual['Advance_Cluster']==0].mean(axis=0)

avg_cb_passing=pd.DataFrame(avg_cb_passing)

cb_passing_visual['Advance_Cluster']= cb_passing_visual['Advance_Cluster'].astype(str)

cols=cb_passing_visual.select_dtypes([np.number]).columns

cb_passing_visual['Advance_Cluster']= cb_passing_visual['Advance_Cluster'].astype(int)

avg_cb_passing['Advance_Cluster 0']=cb_passing_visual[cb_passing_visual['Advance_Cluster']==0].mean(axis=0)

avg_cb_passing['Advance_Cluster 1']=cb_passing_visual[cb_passing_visual['Advance_Cluster']==1].mean(axis=0)

avg_cb_passing['Advance_Cluster 2']=cb_passing_visual[cb_passing_visual['Advance_Cluster']==2].mean(axis=0)

#avg_cb_passing['Advance_Cluster 3']=cb_passing_visual[cb_passing_visual['Advance_Cluster']==3].mean(axis=0)

avg_cb_passing.drop(0,axis=1,inplace=True)

avg_cb_passing=avg_cb_passing.drop('Advance_Cluster',axis=0)

avg_cb_passing

heat=cb_passing_visual[cb_passing_visual['Advance_Cluster']==0].mean(axis=0)

heat=pd.DataFrame(heat)

cb_passing_visual['Advance_Cluster']= cb_passing_visual['Advance_Cluster'].astype(str)

cols=cb_passing_visual.select_dtypes([np.number]).columns

cb_passing_visual[cols]=(cb_passing_visual[cols]-cb_passing_visual[cols].min())/(cb_passing_visual[cols].max()-cb_passing_visual[cols].min())

cb_passing_visual['Advance_Cluster']= cb_passing_visual['Advance_Cluster'].astype(int)

heat['Advance_Cluster 0']=cb_passing_visual[cb_passing_visual['Advance_Cluster']==0].mean(axis=0)

heat['Advance_Cluster 1']=cb_passing_visual[cb_passing_visual['Advance_Cluster']==1].mean(axis=0)

heat['Advance_Cluster 2']=cb_passing_visual[cb_passing_visual['Advance_Cluster']==2].mean(axis=0)

cb_passing_visual['Age']=cb_passing_visual['Age'].astype(float)

cb_passing_visual['Age']=cb_passing_visual['Age'].astype(int)

cb_passing_search['Age']=cb_passing_search['Age'].astype(float)

cb_passing_search['Age']=cb_passing_search['Age'].astype(int)

cb_passing_search['Value_Num']=cb_passing_search['Value_Num'].astype(float)

cb_passing_search['Value_Num']=cb_passing_search['Value_Num'].astype(int)

heat=heat.drop(0,axis=1)

heat=heat.drop('Advance_Cluster',axis=0)

heat

sns.heatmap(heat, cmap="BuGn")

"""**ANALYSIS OF THE CLUSTERS**

1.   Cluster 0 - **Average passing Centre-Back**. These types of centre backs have a decent pass completion %. Thier pass completion % is a little lower than the best passing centre-back. They also are less progresive than the best passing centre backs.

2.  Cluster 1-  **Best passing Centre-Back**.They have the highest % of passes completed and whenever they play thier passes there is a high chance it will reach it's destination. Most of thier passes are of medium range and one thing to notice is that thier % of progressive passes is less comparitively

3.  Cluster 2-**Worst Passing Centre-Back**. These centre backs have the lowest % of passes completed meaning that thier is a good chance that they will missplace a pass and the opponents can take advantage of it. They also attempt the highest % of short passes.
"""

def club_cb_passing(TeamName):
  return cb_passing_search[cb_passing_search['Squad'] == TeamName][['Player','Nation','Pos','Squad','Value','Value_Num','Age','Total.Cmp%','Total.TotDist','Total.PrgDist','Short.Cmp%','Medium.Cmp%','Long.Cmp%','Ast','xA','A-xA','KP','1/3rd','PPA','CrsPA','Prog','Advance_Cluster']]

def Replacement_cb_passing(Player, age, value):
  
  Advance_Cluster_number=int(cb_passing_search[cb_passing_search['Player']==Player]['Advance_Cluster'])
  
  if Advance_Cluster_number==0:
  
    search_df= cb_passing_search.query('Advance_Cluster == 0 or Advance_Cluster == 1 and Age <= @age and Value_Num <= @value' )
  
  elif Advance_Cluster_number==1:
  
    search_df= cb_passing_search.query('Advance_Cluster == 1 or Advance_Cluster == 0  and Age <= @age and Value_Num <= @value' )
    
  elif Advance_Cluster_number==2:
  
    search_df= cb_passing_search.query('Advance_Cluster == 0 or Advance_Cluster == 1 and Age <= @age and Value_Num <= @value' )
  
  return search_df

result_cb_passing=Replacement_cb_passing(Player,Age,Value)

result_cb_passing.sort_values('Advance_Cluster',ascending=False)

result_cb_passing.drop(['Value','Value_Num','Pos','Squad','Age'],inplace=True,axis=1)

#result_advance['Advance_Cluster']=result_advance['Advance_Cluster'].replace(to_replace =[0,1,2],value =["Ball Playing","Defensive","Mix"])

output_cb = pd.merge(result_basic,result_cb_passing, how='inner', on='Player')

output_cb

output_cb[['Player','Nation','Pos','Value','Value_Num','Squad','Age','Basic_Cluster','Advance_Cluster']]

"""# **Right Back Defending**"""

defending_data=pd.read_excel("https://github.com/TazeemKhan9/Football-Player-Replacement/blob/main/Original%20Data/Defending%20Data.xlsx?raw=true")

defending_data

defending_data["Age"] = defending_data["Age"].astype(str)

defending_data["Value_Num"] = defending_data["Value_Num"].astype(str)

defending_data['Tkl_Win%']=defending_data['TklW/90']/defending_data['Tkl/90']

defending_data=defending_data.drop(['Rk','Nation','Born','Tkl_Mid 3rd/90','Tkl_Att 3rd/90','Tkl_Vs_Dribblers_Att/90','Pressures/90','Succ_Presures/90','Pressures_Mid_3rd/90','Pressures_Att_3rd/90'	,'Blocks_Vs_SoT/90','Blocks_Vs_Pass/90','Tkl+Int/90'],axis=1)

defending_data=defending_data[defending_data['90s'] >=10]

right_back=defending_data[defending_data['Pos']=='RB']

right_back=right_back.drop('90s',axis=1)

right_back.reset_index(drop=True,inplace=True)

right_back

from sklearn import preprocessing

scaler = preprocessing.MinMaxScaler()

cols=right_back.select_dtypes([np.number]).columns

x=right_back[cols]

#x=x.fillna(0)

x_scaled = scaler.fit_transform(x)

X= pd.DataFrame(x_scaled)

X

from sklearn.decomposition import PCA

pca=PCA()

reduced_rb=pd.DataFrame(pca.fit_transform(X))

var=pca.explained_variance_ratio_.cumsum()

var

from sklearn.decomposition import PCA

pca = PCA(n_components = 7) # 2D PCA for the plot

reduced_rb = pd.DataFrame(pca.fit_transform(X))

reduced_rb

plt.figure(figsize=(10, 7))  

plt.title("Dendrograms")  

dend = shc.dendrogram(shc.linkage(reduced_rb, method='ward'))

from sklearn.cluster import KMeans

sse = {}

for k in range(1, 10):

    kmeans = KMeans(n_clusters=k).fit(reduced_rb)

    #reduced_rb["clusters"] = kmeans.labels_

    #print(data["clusters"])

    sse[k] = kmeans.inertia_ # Inertia: Sum of distances of samples to their closest cluster center

plt.figure()

plt.plot(list(sse.keys()), list(sse.values()))

plt.xlabel("Number of cluster")

plt.ylabel("SSE")

plt.show()

from sklearn.cluster import KMeans
# specify the number of clusters

kmeans = KMeans(n_clusters=3,random_state=1)

# fit the input data

kmeans = kmeans.fit(reduced_rb)

# get the cluster labels

labels = kmeans.predict(reduced_rb)

# centroid values

centroid = kmeans.cluster_centers_

# cluster values

clusters = kmeans.labels_.tolist()

reduced_rb['cluster'] = clusters

reduced_rb['name'] = right_back['Player']

reduced_rb.columns = ['PC1','PC2','PC3','PC4','PC5','PC6','PC7','Basic_Cluster','Name']

reduced_rb

right_back['Basic_Cluster']=clusters

rb_search=right_back.sort_values('Basic_Cluster')

import matplotlib as mpl 
import matplotlib.pyplot as plt 
import matplotlib.gridspec as gridspec 
import matplotlib.patheffects as path_effects

#Selecting Team
title_font = "Alegreya Sans"
body_font = "Open Sans"
text_color = "w"
background = "#313332"
filler = "grey"
primary = "red"


fig, ax = plt.subplots(figsize=(20,20))
fig.set_facecolor(background)
ax.patch.set_facecolor(background)

x = reduced_rb.PC1
y = reduced_rb.PC2
txt = reduced_rb.Name
c=reduced_rb.Basic_Cluster
scatter=ax.scatter(x,y,s=120,c=c,cmap='Spectral')

legend1 = ax.legend(*scatter.legend_elements(),
                    loc="upper right", title="Classes")
ax.add_artist(legend1)


ax.annotate
fig.text(0.15,0.91,"Goalkeeping Basic Stats",fontweight="bold",fontsize=22, fontfamily=title_font,color=text_color)

fig.text(0.15,0.89,"Top 5 European Leagues",fontweight="regular", fontsize=18,fontfamily=title_font, color=text_color)

for i, txt in enumerate(txt):
    ax.annotate(txt, (x[i], y[i]),color=text_color)

ax.set_xlabel("PC1", fontfamily=title_font, fontweight="bold", fontsize=12, color=text_color)
ax.set_ylabel("PC2", fontfamily=title_font, fontweight="bold", fontsize= 12, color=text_color)

plt.show()

rb_visual=rb_search.sort_values('Basic_Cluster')
rb_visual[rb_visual['Basic_Cluster']==2]

avg_rb=rb_visual[rb_visual['Basic_Cluster']==0].mean(axis=0)

avg_rb=pd.DataFrame(avg_rb)

rb_visual['Basic_Cluster']= rb_visual['Basic_Cluster'].astype(str)

cols=rb_visual.select_dtypes([np.number]).columns

rb_visual['Basic_Cluster']= rb_visual['Basic_Cluster'].astype(int)

avg_rb['Basic_Cluster 0']=rb_visual[rb_visual['Basic_Cluster']==0].mean(axis=0)

avg_rb['Basic_Cluster 1']=rb_visual[rb_visual['Basic_Cluster']==1].mean(axis=0)

avg_rb['Basic_Cluster 2']=rb_visual[rb_visual['Basic_Cluster']==2].mean(axis=0)

#avg_rb['Basic_Cluster 3']=rb_visual[rb_visual['Basic_Cluster']==3].mean(axis=0)

#avg_rb['Basic_Cluster 4']=rb_visual[rb_visual['Basic_Cluster']==4].mean(axis=0)

avg_rb.drop(0,axis=1,inplace=True)

avg_rb=avg_rb.drop('Basic_Cluster',axis=0)

avg_rb

heat=rb_visual[rb_visual['Basic_Cluster']==0].mean(axis=0)

heat=pd.DataFrame(heat)

rb_visual['Basic_Cluster']= rb_visual['Basic_Cluster'].astype(str)

cols=rb_visual.select_dtypes([np.number]).columns


rb_visual[cols]=(rb_visual[cols]-rb_visual[cols].min())/(rb_visual[cols].max()-rb_visual[cols].min())

rb_visual['Basic_Cluster']= rb_visual['Basic_Cluster'].astype(int)

heat['Cluster 0']=rb_visual[rb_visual['Basic_Cluster']==0].mean(axis=0)

heat['Cluster 1']=rb_visual[rb_visual['Basic_Cluster']==1].mean(axis=0)

heat['Cluster 2']=rb_visual[rb_visual['Basic_Cluster']==2].mean(axis=0)

heat.drop(0,axis=1,inplace=True)

heat=heat.drop('Basic_Cluster',axis=0)

rb_visual['Age']=rb_visual['Age'].astype(float)

rb_visual['Age']=rb_visual['Age'].astype(int)

rb_search['Age']=rb_search['Age'].astype(float)

rb_search['Age']=rb_search['Age'].astype(int)

rb_search['Value_Num']=rb_search['Value_Num'].astype(float)

rb_search['Value_Num']=rb_search['Value_Num'].astype(int)


heat

import seaborn as sns
sns.heatmap(heat, cmap="BuGn")

def club(TeamName):
  return rb_search[rb_search['Squad'] == TeamName][['Player','Pos','Squad','Value','Value_Num','Age','Tkl/90','TklW/90','Tkl_Def 3rd/90','Tkl%_Vs_Dribblers','Dribbled_Past/90','%_Succ_Pressures/90','Pressures_Def_3rd/90','Blocks/90','Blocks_Vs_Shots/90','Interceptions/90','Clearance/90','Errors/90','Tkl_Win%','Basic_Cluster']]

TeamName= input('Enter your team name : ')
club(TeamName)

def Replacement_rb(Player, age, value):
  
  Basic_Cluster_number=int(rb_search[rb_search['Player']==Player]['Basic_Cluster'])
  
  if Basic_Cluster_number==0:
  
    search_df= rb_search.query('Basic_Cluster == 0 and Age <= @age and Value_Num <= @value' )
  
  elif Basic_Cluster_number==1:
  
    search_df= rb_search.query('Basic_Cluster == 1 and Age <= @age and Value_Num <= @value' )
    
  elif Basic_Cluster_number==2:
  
    search_df= rb_search.query('Basic_Cluster == 2 and Age <= @age and Value_Num <= @value' )
  
  return search_df

Player=input('Enter player to be replaced :')

Age=int(input('Enter the age of the player you want to buy:'))

Value=int(input('Enter the budget for the player you want to buy :'))

result_basic=Replacement_rb(Player,Age,Value)

result_basic.sort_values('Basic_Cluster',ascending=False)

result_basic

"""# **Right Back Passing**"""

passing_data=pd.read_excel("https://github.com/TazeemKhan9/Football-Player-Replacement/blob/main/Original%20Data/Basic%20Passing.xlsx?raw=true")

passing_data

passing_data['Player'] =passing_data['Player'].str.split('\\', expand=True)[0]

passing_data["Age"] = passing_data["Age"].astype(str)

passing_data["Value_Num"] = passing_data["Value_Num"].astype(str)

passing_data['Short.Att%']=(passing_data['Short.Att']/passing_data['Total.Att'])*100

passing_data['Medium.Att%']=(passing_data['Medium.Att']/passing_data['Total.Att'])*100

passing_data['Long.Att%']=(passing_data['Long.Att']/passing_data['Total.Att'])*100

passing_data['Progressive%']=(passing_data['Prog']/passing_data['Total.Att'])*100

passing_data=passing_data.drop(['Rk','Born','Total.Cmp','Short.Cmp','Medium.Cmp','Long.Cmp','Short.Att','Medium.Att','Long.Att','Prog','A-xA','1/3rd','PPA'],axis=1)

passing_data=passing_data[passing_data['90s'] >=10]

passing_data=passing_data.drop('90s',axis=1)

rb_passing = passing_data[passing_data['Pos']=='RB']

rb_passing =rb_passing.dropna() 

rb_passing.reset_index(drop=True,inplace=True)

rb_passing

from sklearn import preprocessing

scaler = preprocessing.MinMaxScaler()

cols=rb_passing.select_dtypes([np.number]).columns

x=rb_passing[cols]

x=x.fillna(0)

x_scaled = scaler.fit_transform(x)

X= pd.DataFrame(x_scaled)

from sklearn.decomposition import PCA

pca=PCA()

reduced_rb_passing=pd.DataFrame(pca.fit_transform(X))

var=pca.explained_variance_ratio_.cumsum()

var

from sklearn.decomposition import PCA

pca = PCA(n_components = 7) # 2D PCA for the plot

reduced_rb_passing = pd.DataFrame(pca.fit_transform(X))

reduced_rb_passing

plt.figure(figsize=(10, 7))  
plt.title("Dendrograms")  
dend = shc.dendrogram(shc.linkage(reduced_rb_passing, method='ward'))

Sum_of_squared_distances = []
K = range(1,15)
for k in K:
    km = KMeans(n_clusters=k)
    km = km.fit(reduced_rb_passing)
    Sum_of_squared_distances.append(km.inertia_)
plt.plot(K, Sum_of_squared_distances, 'bx-')
plt.xlabel('k')
plt.ylabel('Sum_of_squared_distances')
plt.title('Elbow Method For Optimal k')
plt.show()

from sklearn.cluster import KMeans

# specify the number of clusters

kmeans = KMeans(n_clusters=3,random_state=2)

# fit the input data

kmeans = kmeans.fit(reduced_rb_passing)

# get the cluster labels

labels = kmeans.predict(reduced_rb_passing)

# centroid values

centroid = kmeans.cluster_centers_

#cluster values

adv_clusters = kmeans.labels_.tolist()

reduced_rb_passing['Advance_Cluster'] = adv_clusters

reduced_rb_passing['name'] =rb_passing['Player']

reduced_rb_passing.columns = ['PC1','PC2','PC3','PC4','PC5','PC6','PC7','Advance_Cluster', 'Name']

reduced_rb_passing

rb_passing['Advance_Cluster']=adv_clusters

rb_passing_search=rb_passing.sort_values('Advance_Cluster')

import matplotlib as mpl 
import matplotlib.pyplot as plt 
import matplotlib.gridspec as gridspec 
import matplotlib.patheffects as path_effects

#Selecting Team
title_font = "Alegreya Sans"
body_font = "Open Sans"
text_color = "w"
background = "#313332"
filler = "grey"
primary = "red"


fig, ax = plt.subplots(figsize=(20,20))
fig.set_facecolor(background)
ax.patch.set_facecolor(background)

ax.grid()

x = reduced_rb_passing.PC1
y = reduced_rb_passing.PC2
txt = reduced_rb_passing.Name
ax.scatter(x,y,s=120,c=adv_clusters,cmap='Spectral')
ax.annotate
fig.text(0.15,0.91,"Goalkeeping Passing Stats",fontweight="bold",fontsize=22, fontfamily=title_font,color=text_color)

fig.text(0.15,0.89,"Top 5 European Leagues",fontweight="regular", fontsize=18,fontfamily=title_font, color=text_color)

for i, txt in enumerate(txt):
    ax.annotate(txt, (x[i], y[i]),color=text_color)

ax.set_xlabel("PC1", fontfamily=title_font, fontweight="bold", fontsize=12, color=text_color)
ax.set_ylabel("PC2", fontfamily=title_font, fontweight="bold", fontsize= 12, color=text_color)

plt.show()

rb_passing_visual=rb_passing_search.sort_values('Advance_Cluster')
rb_passing_visual[rb_passing_visual['Advance_Cluster']==2]

avg_rb_passing=rb_passing_visual[rb_passing_visual['Advance_Cluster']==0].mean(axis=0)

avg_rb_passing=pd.DataFrame(avg_rb_passing)

rb_passing_visual['Advance_Cluster']= rb_passing_visual['Advance_Cluster'].astype(str)

cols=rb_passing_visual.select_dtypes([np.number]).columns

rb_passing_visual['Advance_Cluster']= rb_passing_visual['Advance_Cluster'].astype(int)

avg_rb_passing['Advance_Cluster 0']=rb_passing_visual[rb_passing_visual['Advance_Cluster']==0].mean(axis=0)

avg_rb_passing['Advance_Cluster 1']=rb_passing_visual[rb_passing_visual['Advance_Cluster']==1].mean(axis=0)

avg_rb_passing['Advance_Cluster 2']=rb_passing_visual[rb_passing_visual['Advance_Cluster']==2].mean(axis=0)

#avg_rb_passing['Advance_Cluster 3']=rb_passing_visual[rb_passing_visual['Advance_Cluster']==3].mean(axis=0)

avg_rb_passing.drop(0,axis=1,inplace=True)

avg_rb_passing=avg_rb_passing.drop('Advance_Cluster',axis=0)

avg_rb_passing

heat=rb_passing_visual[rb_passing_visual['Advance_Cluster']==0].mean(axis=0)

heat=pd.DataFrame(heat)

rb_passing_visual['Advance_Cluster']= rb_passing_visual['Advance_Cluster'].astype(str)

cols=rb_passing_visual.select_dtypes([np.number]).columns

rb_passing_visual[cols]=(rb_passing_visual[cols]-rb_passing_visual[cols].min())/(rb_passing_visual[cols].max()-rb_passing_visual[cols].min())

rb_passing_visual['Advance_Cluster']= rb_passing_visual['Advance_Cluster'].astype(int)

heat['Advance_Cluster 0']=rb_passing_visual[rb_passing_visual['Advance_Cluster']==0].mean(axis=0)

heat['Advance_Cluster 1']=rb_passing_visual[rb_passing_visual['Advance_Cluster']==1].mean(axis=0)

heat['Advance_Cluster 2']=rb_passing_visual[rb_passing_visual['Advance_Cluster']==2].mean(axis=0)

rb_passing_visual['Age']=rb_passing_visual['Age'].astype(float)

rb_passing_visual['Age']=rb_passing_visual['Age'].astype(int)

rb_passing_search['Age']=rb_passing_search['Age'].astype(float)

rb_passing_search['Age']=rb_passing_search['Age'].astype(int)

rb_passing_search['Value_Num']=rb_passing_search['Value_Num'].astype(float)

rb_passing_search['Value_Num']=rb_passing_search['Value_Num'].astype(int)

heat=heat.drop(0,axis=1)

heat=heat.drop('Advance_Cluster',axis=0)

heat

sns.heatmap(heat, cmap="BuGn")

def club_rb_passing(TeamName):
  return rb_passing_search[rb_passing_search['Squad'] == TeamName][['Player','Nation','Pos','Squad','Value','Value_Num','Age','Total.Cmp%','Total.TotDist','Total.PrgDist','Short.Cmp%','Medium.Cmp%','Long.Cmp%','Ast','xA','A-xA','KP','1/3rd','PPA','CrsPA','Prog','Advance_Cluster']]

def Replacement_rb_passing(Player, age, value):
  
  Advance_Cluster_number=int(rb_passing_search[rb_passing_search['Player']==Player]['Advance_Cluster'])
  
  if Advance_Cluster_number==0:
  
    search_df= rb_passing_search.query('Advance_Cluster == 0 and Age <= @age and Value_Num <= @value' )
  
  elif Advance_Cluster_number==1:
  
    search_df= rb_passing_search.query('Advance_Cluster == 1 and Age <= @age and Value_Num <= @value' )
    
  elif Advance_Cluster_number==2:
  
    search_df= rb_passing_search.query('Advance_Cluster == 2 and Age <= @age and Value_Num <= @value' )
  
  return search_df

result_rb_passing=Replacement_rb_passing(Player,Age,Value)
result_rb_passing.sort_values('Advance_Cluster',ascending=False)

result_rb_passing.drop(['Value','Value_Num','Pos','Squad','Age'],inplace=True,axis=1)

#result_advance['Advance_Cluster']=result_advance['Advance_Cluster'].replace(to_replace =[0,1,2],value =["Ball Playing","Defensive","Mix"])

output_rb = pd.merge(result_basic,result_rb_passing, how='inner', on='Player')

output_rb

output_rb[['Player','Nation','Pos','Value','Value_Num','Squad','Age','Basic_Cluster','Advance_Cluster']]

"""# **Left-Back Defending**"""

defending_data=pd.read_excel("https://github.com/TazeemKhan9/Football-Player-Replacement/blob/main/Original%20Data/Defending%20Data.xlsx?raw=true")

defending_data

defending_data["Age"] = defending_data["Age"].astype(str)

defending_data["Value_Num"] = defending_data["Value_Num"].astype(str)

defending_data['Tkl_Win%']=defending_data['TklW/90']/defending_data['Tkl/90']

defending_data=defending_data.drop(['Rk','Nation','Born','Tkl_Mid 3rd/90','Tkl_Att 3rd/90','Tkl_Vs_Dribblers_Att/90','Pressures/90','Succ_Presures/90','Pressures_Mid_3rd/90','Pressures_Att_3rd/90'	,'Blocks_Vs_SoT/90','Blocks_Vs_Pass/90','Tkl+Int/90'],axis=1)

defending_data=defending_data[defending_data['90s'] >=10]

left_back=defending_data[defending_data['Pos']=='LB']

left_back=left_back.drop('90s',axis=1)

left_back.reset_index(drop=True,inplace=True)

left_back

from sklearn import preprocessing

scaler = preprocessing.MinMaxScaler()

cols=left_back.select_dtypes([np.number]).columns

x=left_back[cols]

#x=x.fillna(0)

x_scaled = scaler.fit_transform(x)

X= pd.DataFrame(x_scaled)

X

from sklearn.decomposition import PCA

pca=PCA()

reduced_lb=pd.DataFrame(pca.fit_transform(X))

var=pca.explained_variance_ratio_.cumsum()

var

from sklearn.decomposition import PCA

pca = PCA(n_components = 8) # 2D PCA for the plot

reduced_lb = pd.DataFrame(pca.fit_transform(X))

reduced_lb

plt.figure(figsize=(10, 7))  

plt.title("Dendrograms")  

dend = shc.dendrogram(shc.linkage(reduced_lb, method='ward'))

from sklearn.cluster import KMeans

sse = {}

for k in range(1, 10):

    kmeans = KMeans(n_clusters=k).fit(reduced_lb)

    #reduced_lb["clusters"] = kmeans.labels_

    #print(data["clusters"])

    sse[k] = kmeans.inertia_ # Inertia: Sum of distances of samples to their closest cluster center

plt.figure()

plt.plot(list(sse.keys()), list(sse.values()))

plt.xlabel("Number of cluster")

plt.ylabel("SSE")

plt.show()

from sklearn.cluster import KMeans
# specify the number of clusters

kmeans = KMeans(n_clusters=3,random_state=1)

# fit the input data

kmeans = kmeans.fit(reduced_lb)

# get the cluster labels

labels = kmeans.predict(reduced_lb)

# centroid values

centroid = kmeans.cluster_centers_

# cluster values

clusters = kmeans.labels_.tolist()

reduced_lb['cluster'] = clusters

reduced_lb['name'] = left_back['Player']

reduced_lb.columns = ['PC1','PC2','PC3','PC4','PC5','PC6','PC7','PC8','Basic_Cluster','Name']

reduced_lb

left_back['Basic_Cluster']=clusters

lb_search=left_back.sort_values('Basic_Cluster')

import matplotlib as mpl 
import matplotlib.pyplot as plt 
import matplotlib.gridspec as gridspec 
import matplotlib.patheffects as path_effects

#Selecting Team
title_font = "Alegreya Sans"
body_font = "Open Sans"
text_color = "w"
background = "#313332"
filler = "grey"
primary = "red"


fig, ax = plt.subplots(figsize=(20,20))
fig.set_facecolor(background)
ax.patch.set_facecolor(background)

x = reduced_lb.PC1
y = reduced_lb.PC2
txt = reduced_lb.Name
c=reduced_lb.Basic_Cluster
scatter=ax.scatter(x,y,s=120,c=c,cmap='Spectral')

legend1 = ax.legend(*scatter.legend_elements(),
                    loc="upper right", title="Classes")
ax.add_artist(legend1)


ax.annotate
fig.text(0.15,0.91,"Goalkeeping Basic Stats",fontweight="bold",fontsize=22, fontfamily=title_font,color=text_color)

fig.text(0.15,0.89,"Top 5 European Leagues",fontweight="regular", fontsize=18,fontfamily=title_font, color=text_color)

for i, txt in enumerate(txt):
    ax.annotate(txt, (x[i], y[i]),color=text_color)

ax.set_xlabel("PC1", fontfamily=title_font, fontweight="bold", fontsize=12, color=text_color)
ax.set_ylabel("PC2", fontfamily=title_font, fontweight="bold", fontsize= 12, color=text_color)

plt.show()

lb_visual=lb_search.sort_values('Basic_Cluster')
lb_visual[lb_visual['Basic_Cluster']==2]

avg_lb=lb_visual[lb_visual['Basic_Cluster']==0].mean(axis=0)

avg_lb=pd.DataFrame(avg_lb)

lb_visual['Basic_Cluster']= lb_visual['Basic_Cluster'].astype(str)

cols=lb_visual.select_dtypes([np.number]).columns

lb_visual['Basic_Cluster']= lb_visual['Basic_Cluster'].astype(int)

avg_lb['Basic_Cluster 0']=lb_visual[lb_visual['Basic_Cluster']==0].mean(axis=0)

avg_lb['Basic_Cluster 1']=lb_visual[lb_visual['Basic_Cluster']==1].mean(axis=0)

avg_lb['Basic_Cluster 2']=lb_visual[lb_visual['Basic_Cluster']==2].mean(axis=0)

#avg_lb['Basic_Cluster 3']=lb_visual[lb_visual['Basic_Cluster']==3].mean(axis=0)

#avg_lb['Basic_Cluster 4']=lb_visual[lb_visual['Basic_Cluster']==4].mean(axis=0)

avg_lb.drop(0,axis=1,inplace=True)

avg_lb=avg_lb.drop('Basic_Cluster',axis=0)

avg_lb

heat=lb_visual[lb_visual['Basic_Cluster']==0].mean(axis=0)

heat=pd.DataFrame(heat)

lb_visual['Basic_Cluster']= lb_visual['Basic_Cluster'].astype(str)

cols=lb_visual.select_dtypes([np.number]).columns


lb_visual[cols]=(lb_visual[cols]-lb_visual[cols].min())/(lb_visual[cols].max()-lb_visual[cols].min())

lb_visual['Basic_Cluster']= lb_visual['Basic_Cluster'].astype(int)

heat['Cluster 0']=lb_visual[lb_visual['Basic_Cluster']==0].mean(axis=0)

heat['Cluster 1']=lb_visual[lb_visual['Basic_Cluster']==1].mean(axis=0)

heat['Cluster 2']=lb_visual[lb_visual['Basic_Cluster']==2].mean(axis=0)

heat.drop(0,axis=1,inplace=True)

heat=heat.drop('Basic_Cluster',axis=0)

lb_visual['Age']=lb_visual['Age'].astype(float)

lb_visual['Age']=lb_visual['Age'].astype(int)

lb_search['Age']=lb_search['Age'].astype(float)

lb_search['Age']=lb_search['Age'].astype(int)

lb_search['Value_Num']=lb_search['Value_Num'].astype(float)

lb_search['Value_Num']=lb_search['Value_Num'].astype(int)

#heat=heat.drop('Age',axis=0)

heat

import seaborn as sns
sns.heatmap(heat, cmap="BuGn")

def club(TeamName):
  return lb_search[lb_search['Squad'] == TeamName][['Player','Pos','Squad','Value','Value_Num','Age','Tkl/90','TklW/90','Tkl_Def 3rd/90','Tkl%_Vs_Dribblers','Dribbled_Past/90','%_Succ_Pressures/90','Pressures_Def_3rd/90','Blocks/90','Blocks_Vs_Shots/90','Interceptions/90','Clearance/90','Errors/90','Tkl_Win%','Basic_Cluster']]

TeamName= input('Enter your team name : ')
club(TeamName)

def Replacement_lb(Player, age, value):
  
  Basic_Cluster_number=int(lb_search[lb_search['Player']==Player]['Basic_Cluster'])
  
  if Basic_Cluster_number==0:
  
    search_df= lb_search.query('Basic_Cluster == 0 and Age <= @age and Value_Num <= @value' )
  
  elif Basic_Cluster_number==1:
  
    search_df= lb_search.query('Basic_Cluster == 1 and Age <= @age and Value_Num <= @value' )
    
  elif Basic_Cluster_number==2:
  
    search_df= lb_search.query('Basic_Cluster == 2 and Age <= @age and Value_Num <= @value' )
  elif Basic_Cluster_number==3:
    
    search_df= lb_search.query('Basic_Cluster == 3 and Age <= @age and Value_Num <= @value' )
  
  return search_df

Player=input('Enter player to be replaced :')

Age=int(input('Enter the age of the player you want to buy:'))

Value=int(input('Enter the budget for the player you want to buy :'))

result_basic=Replacement_lb(Player,Age,Value)

result_basic.sort_values('Basic_Cluster',ascending=False)

result_basic

"""# **Left Back Passing**"""

passing_data=pd.read_excel("https://github.com/TazeemKhan9/Football-Player-Replacement/blob/main/Original%20Data/Basic%20Passing.xlsx?raw=true")

passing_data

passing_data['Player'] =passing_data['Player'].str.split('\\', expand=True)[0]

passing_data["Age"] = passing_data["Age"].astype(str)

passing_data["Value_Num"] = passing_data["Value_Num"].astype(str)

passing_data['Short.Att%']=(passing_data['Short.Att']/passing_data['Total.Att'])*100

passing_data['Medium.Att%']=(passing_data['Medium.Att']/passing_data['Total.Att'])*100

passing_data['Long.Att%']=(passing_data['Long.Att']/passing_data['Total.Att'])*100

passing_data['Progressive%']=(passing_data['Prog']/passing_data['Total.Att'])*100

passing_data=passing_data.drop(['Rk','Born','Total.Cmp','Short.Cmp','Medium.Cmp','Long.Cmp','Short.Att','Medium.Att','Long.Att','Prog','A-xA','1/3rd','PPA'],axis=1)

passing_data=passing_data[passing_data['90s'] >=10]

passing_data=passing_data.drop('90s',axis=1)

lb_passing = passing_data[passing_data['Pos']=='LB']

lb_passing =lb_passing.dropna() 

lb_passing.reset_index(drop=True,inplace=True)

lb_passing

from sklearn import preprocessing

scaler = preprocessing.MinMaxScaler()

cols=lb_passing.select_dtypes([np.number]).columns

x=lb_passing[cols]

x=x.fillna(0)

x_scaled = scaler.fit_transform(x)

X= pd.DataFrame(x_scaled)

from sklearn.decomposition import PCA

pca=PCA()

reduced_lb_passing=pd.DataFrame(pca.fit_transform(X))

var=pca.explained_variance_ratio_.cumsum()

var

from sklearn.decomposition import PCA

pca = PCA(n_components = 7) # 2D PCA for the plot

reduced_lb_passing = pd.DataFrame(pca.fit_transform(X))

reduced_lb_passing

plt.figure(figsize=(10, 7))  
plt.title("Dendrograms")  
dend = shc.dendrogram(shc.linkage(reduced_lb_passing, method='ward'))

Sum_of_squared_distances = []
K = range(1,15)
for k in K:
    km = KMeans(n_clusters=k)
    km = km.fit(reduced_lb_passing)
    Sum_of_squared_distances.append(km.inertia_)
plt.plot(K, Sum_of_squared_distances, 'bx-')
plt.xlabel('k')
plt.ylabel('Sum_of_squared_distances')
plt.title('Elbow Method For Optimal k')
plt.show()

from sklearn.cluster import KMeans

# specify the number of clusters

kmeans = KMeans(n_clusters=3,random_state=2)

# fit the input data

kmeans = kmeans.fit(reduced_lb_passing)

# get the cluster labels

labels = kmeans.predict(reduced_lb_passing)

# centroid values

centroid = kmeans.cluster_centers_

#cluster values

adv_clusters = kmeans.labels_.tolist()

reduced_lb_passing['Advance_Cluster'] = adv_clusters

reduced_lb_passing['name'] =lb_passing['Player']

reduced_lb_passing.columns = ['PC1','PC2','PC3','PC4','PC5','PC6','PC7','Advance_Cluster', 'Name']

reduced_lb_passing

lb_passing['Advance_Cluster']=adv_clusters

lb_passing_search=lb_passing.sort_values('Advance_Cluster')

import matplotlib as mpl 
import matplotlib.pyplot as plt 
import matplotlib.gridspec as gridspec 
import matplotlib.patheffects as path_effects

#Selecting Team
title_font = "Alegreya Sans"
body_font = "Open Sans"
text_color = "w"
background = "#313332"
filler = "grey"
primary = "red"

fig, ax = plt.subplots(figsize=(20,20))
fig.set_facecolor(background)
ax.patch.set_facecolor(background)

ax.grid()

x = reduced_lb_passing.PC1
y = reduced_lb_passing.PC2
txt = reduced_lb_passing.Name
ax.scatter(x,y,s=120,c=adv_clusters,cmap='Spectral')
ax.annotate
fig.text(0.15,0.91,"Goalkeeping Passing Stats",fontweight="bold",fontsize=22, fontfamily=title_font,color=text_color)

fig.text(0.15,0.89,"Top 5 European Leagues",fontweight="regular", fontsize=18,fontfamily=title_font, color=text_color)

for i, txt in enumerate(txt):
    ax.annotate(txt, (x[i], y[i]),color=text_color)

ax.set_xlabel("PC1", fontfamily=title_font, fontweight="bold", fontsize=12, color=text_color)
ax.set_ylabel("PC2", fontfamily=title_font, fontweight="bold", fontsize= 12, color=text_color)

plt.show()

lb_passing_visual=lb_passing_search.sort_values('Advance_Cluster')
lb_passing_visual[lb_passing_visual['Advance_Cluster']==0]

avg_lb_passing=lb_passing_visual[lb_passing_visual['Advance_Cluster']==0].mean(axis=0)

avg_lb_passing=pd.DataFrame(avg_lb_passing)

lb_passing_visual['Advance_Cluster']= lb_passing_visual['Advance_Cluster'].astype(str)

cols=lb_passing_visual.select_dtypes([np.number]).columns

lb_passing_visual['Advance_Cluster']= lb_passing_visual['Advance_Cluster'].astype(int)

avg_lb_passing['Advance_Cluster 0']=lb_passing_visual[lb_passing_visual['Advance_Cluster']==0].mean(axis=0)

avg_lb_passing['Advance_Cluster 1']=lb_passing_visual[lb_passing_visual['Advance_Cluster']==1].mean(axis=0)

avg_lb_passing['Advance_Cluster 2']=lb_passing_visual[lb_passing_visual['Advance_Cluster']==2].mean(axis=0)

#avg_lb_passing['Advance_Cluster 3']=lb_passing_visual[lb_passing_visual['Advance_Cluster']==3].mean(axis=0)

avg_lb_passing.drop(0,axis=1,inplace=True)

avg_lb_passing=avg_lb_passing.drop('Advance_Cluster',axis=0)

avg_lb_passing

heat=lb_passing_visual[lb_passing_visual['Advance_Cluster']==0].mean(axis=0)

heat=pd.DataFrame(heat)

lb_passing_visual['Advance_Cluster']= lb_passing_visual['Advance_Cluster'].astype(str)

cols=lb_passing_visual.select_dtypes([np.number]).columns

lb_passing_visual[cols]=(lb_passing_visual[cols]-lb_passing_visual[cols].min())/(lb_passing_visual[cols].max()-lb_passing_visual[cols].min())

lb_passing_visual['Advance_Cluster']= lb_passing_visual['Advance_Cluster'].astype(int)

heat['Advance_Cluster 0']=lb_passing_visual[lb_passing_visual['Advance_Cluster']==0].mean(axis=0)

heat['Advance_Cluster 1']=lb_passing_visual[lb_passing_visual['Advance_Cluster']==1].mean(axis=0)

heat['Advance_Cluster 2']=lb_passing_visual[lb_passing_visual['Advance_Cluster']==2].mean(axis=0)

#heat['Advance_Cluster 3']=lb_passing_visual[lb_passing_visual['Advance_Cluster']==3].mean(axis=0)

lb_passing_visual['Age']=lb_passing_visual['Age'].astype(float)

lb_passing_visual['Age']=lb_passing_visual['Age'].astype(int)

lb_passing_search['Age']=lb_passing_search['Age'].astype(float)

lb_passing_search['Age']=lb_passing_search['Age'].astype(int)

lb_passing_search['Value_Num']=lb_passing_search['Value_Num'].astype(float)

lb_passing_search['Value_Num']=lb_passing_search['Value_Num'].astype(int)

heat=heat.drop(0,axis=1)

heat=heat.drop('Advance_Cluster',axis=0)

heat

sns.heatmap(heat, cmap="BuGn")

def club_lb_passing(TeamName):
  return lb_passing_search[lb_passing_search['Squad'] == TeamName][['Player','Nation','Pos','Squad','Value','Value_Num','Age','Total.Cmp%','Total.TotDist','Total.PrgDist','Short.Cmp%','Medium.Cmp%','Long.Cmp%','Ast','xA','A-xA','KP','1/3rd','PPA','CrsPA','Prog','Advance_Cluster']]

def Replacement_lb_passing(Player, age, value):
  
  Advance_Cluster_number=int(lb_passing_search[lb_passing_search['Player']==Player]['Advance_Cluster'])
  
  if Advance_Cluster_number==0:
  
    search_df= lb_passing_search.query('Advance_Cluster == 0 and Age <= @age and Value_Num <= @value' )
  
  elif Advance_Cluster_number==1:
  
    search_df= lb_passing_search.query('Advance_Cluster == 1 and Age <= @age and Value_Num <= @value' )
    
  elif Advance_Cluster_number==2:
  
    search_df= lb_passing_search.query('Advance_Cluster == 2 and Age <= @age and Value_Num <= @value' )
  
  return search_df

result_lb_passing=Replacement_lb_passing(Player,Age,Value)

result_lb_passing.sort_values('Advance_Cluster',ascending=False)

result_lb_passing.drop(['Value','Value_Num','Pos','Squad','Age'],inplace=True,axis=1)

#result_advance['Advance_Cluster']=result_advance['Advance_Cluster'].replace(to_replace =[0,1,2],value =["Ball Playing","Defensive","Mix"])

output_lb = pd.merge(result_basic,result_lb_passing, how='inner', on='Player')

output_lb

output_lb[['Player','Nation','Pos','Value','Value_Num','Squad','Age','Basic_Cluster','Advance_Cluster']]

"""# **CDM Defending**"""

defending_data=pd.read_excel("https://github.com/TazeemKhan9/Football-Player-Replacement/blob/main/Original%20Data/Defending%20Data.xlsx?raw=true")

defending_data

defending_data["Age"] = defending_data["Age"].astype(str)

defending_data["Value_Num"] = defending_data["Value_Num"].astype(str)

defending_data['Tkl_Win%']=defending_data['TklW/90']/defending_data['Tkl/90']

defending_data=defending_data.drop(['Rk','Nation','Born','Tkl_Def 3rd/90','Tkl_Att 3rd/90','Pressures_Def_3rd/90','Pressures_Att_3rd/90','Blocks_Vs_SoT/90','Tkl+Int/90'],axis=1)

defending_data=defending_data[defending_data['90s'] >=10]

cdm_defending=defending_data[defending_data['Pos']=='DM']

cdm_defending=cdm_defending.drop('90s',axis=1)

cdm_defending.reset_index(drop=True,inplace=True)

cdm_defending=cdm_defending.dropna() 

cdm_defending

from sklearn import preprocessing

scaler = preprocessing.MinMaxScaler()

cols=cdm_defending.select_dtypes([np.number]).columns

x=cdm_defending[cols]

#x=x.fillna(0)

x_scaled = scaler.fit_transform(x)

X= pd.DataFrame(x_scaled)

X

from sklearn.decomposition import PCA

pca=PCA()

reduced_cdm=pd.DataFrame(pca.fit_transform(X))

var=pca.explained_variance_ratio_.cumsum()

var

from sklearn.decomposition import PCA

pca = PCA(n_components = 8) # 2D PCA for the plot

reduced_cdm = pd.DataFrame(pca.fit_transform(X))

reduced_cdm

plt.figure(figsize=(10, 7))  

plt.title("Dendrograms")  

dend = shc.dendrogram(shc.linkage(reduced_cdm, method='ward'))

from sklearn.cluster import KMeans

sse = {}

for k in range(1, 10):

    kmeans = KMeans(n_clusters=k).fit(reduced_cdm)

    #reduced_cdm["clusters"] = kmeans.labels_

    #print(data["clusters"])

    sse[k] = kmeans.inertia_ # Inertia: Sum of distances of samples to their closest cluster center

plt.figure()

plt.plot(list(sse.keys()), list(sse.values()))

plt.xlabel("Number of cluster")

plt.ylabel("SSE")

plt.show()

from sklearn.cluster import KMeans
# specify the number of clusters

kmeans = KMeans(n_clusters=3,random_state=2)

# fit the input data

kmeans = kmeans.fit(reduced_cdm)

# get the cluster labels

labels = kmeans.predict(reduced_cdm)

# centroid values

centroid = kmeans.cluster_centers_

# cluster values

clusters = kmeans.labels_.tolist()

reduced_cdm['cluster'] = clusters

reduced_cdm['name'] = cdm_defending['Player']

reduced_cdm.columns = ['PC1','PC2','PC3','PC4','PC5','PC6','PC7','PC8','Basic_Cluster','Name']

reduced_cdm

cdm_defending['Basic_Cluster']=clusters

cdm_defending_search=cdm_defending.sort_values('Basic_Cluster')

import matplotlib as mpl 
import matplotlib.pyplot as plt 
import matplotlib.gridspec as gridspec 
import matplotlib.patheffects as path_effects

#Selecting Team
title_font = "Alegreya Sans"
body_font = "Open Sans"
text_color = "w"
background = "#313332"
filler = "grey"
primary = "red"


fig, ax = plt.subplots(figsize=(20,20))
fig.set_facecolor(background)
ax.patch.set_facecolor(background)

x = reduced_cdm.PC1
y = reduced_cdm.PC2
txt = reduced_cdm.Name
c=reduced_cdm.Basic_Cluster
scatter=ax.scatter(x,y,s=120,c=c,cmap='Spectral')

legend1 = ax.legend(*scatter.legend_elements(),
                    loc="upper right", title="Classes")
ax.add_artist(legend1)


ax.annotate
fig.text(0.15,0.91,"Goalkeeping Basic Stats",fontweight="bold",fontsize=22, fontfamily=title_font,color=text_color)

fig.text(0.15,0.89,"Top 5 European Leagues",fontweight="regular", fontsize=18,fontfamily=title_font, color=text_color)

for i, txt in enumerate(txt):
    ax.annotate(txt, (x[i], y[i]),color=text_color)

ax.set_xlabel("PC1", fontfamily=title_font, fontweight="bold", fontsize=12, color=text_color)
ax.set_ylabel("PC2", fontfamily=title_font, fontweight="bold", fontsize= 12, color=text_color)

plt.show()

cdm_defending_visual=cdm_defending_search.sort_values('Basic_Cluster')
cdm_defending_visual[cdm_defending_visual['Basic_Cluster']==0]

avg_cdm=cdm_defending_visual[cdm_defending_visual['Basic_Cluster']==0].mean(axis=0)

avg_cdm=pd.DataFrame(avg_cdm)

cdm_defending_visual['Basic_Cluster']= cdm_defending_visual['Basic_Cluster'].astype(str)

cols=cdm_defending_visual.select_dtypes([np.number]).columns

cdm_defending_visual['Basic_Cluster']= cdm_defending_visual['Basic_Cluster'].astype(int)

avg_cdm['Basic_Cluster 0']=cdm_defending_visual[cdm_defending_visual['Basic_Cluster']==0].mean(axis=0)

avg_cdm['Basic_Cluster 1']=cdm_defending_visual[cdm_defending_visual['Basic_Cluster']==1].mean(axis=0)

avg_cdm['Basic_Cluster 2']=cdm_defending_visual[cdm_defending_visual['Basic_Cluster']==2].mean(axis=0)

#avg_cdm['Basic_Cluster 3']=cdm_defending_visual[cdm_defending_visual['Basic_Cluster']==3].mean(axis=0)

#avg_cdm['Basic_Cluster 4']=cdm_defending_visual[cdm_defending_visual['Basic_Cluster']==4].mean(axis=0)

avg_cdm.drop(0,axis=1,inplace=True)

avg_cdm=avg_cdm.drop('Basic_Cluster',axis=0)

avg_cdm

heat=cdm_defending_visual[cdm_defending_visual['Basic_Cluster']==0].mean(axis=0)

heat=pd.DataFrame(heat)

cdm_defending_visual['Basic_Cluster']= cdm_defending_visual['Basic_Cluster'].astype(str)

cols=cdm_defending_visual.select_dtypes([np.number]).columns

cdm_defending_visual[cols]=(cdm_defending_visual[cols]-cdm_defending_visual[cols].min())/(cdm_defending_visual[cols].max()-cdm_defending_visual[cols].min())

cdm_defending_visual['Basic_Cluster']= cdm_defending_visual['Basic_Cluster'].astype(int)

heat['Cluster 0']=cdm_defending_visual[cdm_defending_visual['Basic_Cluster']==0].mean(axis=0)

heat['Cluster 1']=cdm_defending_visual[cdm_defending_visual['Basic_Cluster']==1].mean(axis=0)

heat['Cluster 2']=cdm_defending_visual[cdm_defending_visual['Basic_Cluster']==2].mean(axis=0)

heat.drop(0,axis=1,inplace=True)

heat=heat.drop('Basic_Cluster',axis=0)

cdm_defending_visual['Age']=cdm_defending_visual['Age'].astype(float)

cdm_defending_visual['Age']=cdm_defending_visual['Age'].astype(int)

cdm_defending_search['Age']=cdm_defending_search['Age'].astype(float)

cdm_defending_search['Age']=cdm_defending_search['Age'].astype(int)

cdm_defending_search['Value_Num']=cdm_defending_search['Value_Num'].astype(float)

cdm_defending_search['Value_Num']=cdm_defending_search['Value_Num'].astype(int)

#heat=heat.drop('Age',axis=0)

heat

import seaborn as sns
sns.heatmap(heat, cmap="BuGn")

def club(TeamName):
  return cdm_defending_search[cdm_defending_search['Squad'] == TeamName][['Player','Pos','Squad','Value','Value_Num','Age','Tkl/90','TklW/90','Tkl_Mid 3rd/90','Tkl_Vs_Dribblers/90','Tkl_Vs_Dribblers_Att/90','Tkl%_Vs_Dribblers','Dribbled_Past/90','Pressures/90','Succ_Presures/90','%_Succ_Pressures/90','Pressures_Mid_3rd/90','Blocks/90','Blocks_Vs_Shots/90','Blocks_Vs_Pass/90','Interceptions/90','Clearance/90','Errors/90','Tkl_Win%','Basic_Cluster']]

TeamName= input('Enter your team name : ')
club(TeamName)

def Replacement_cdm(Player, age, value):
  
  Basic_Cluster_number=int(cdm_defending_search[cdm_defending_search['Player']==Player]['Basic_Cluster'])
  
  if Basic_Cluster_number==0:
  
    search_df= cdm_defending_search.query('Basic_Cluster == 0 and Age <= @age and Value_Num <= @value' )
  
  elif Basic_Cluster_number==1:
  
    search_df= cdm_defending_search.query('Basic_Cluster == 1 and Age <= @age and Value_Num <= @value' )
    
  elif Basic_Cluster_number==2:
  
    search_df= cdm_defending_search.query('Basic_Cluster == 2 and Age <= @age and Value_Num <= @value' )
  
  return search_df

Player=input('Enter player to be replaced :')

Age=int(input('Enter the age of the player you want to buy:'))

Value=int(input('Enter the budget for the player you want to buy :'))

result_basic=Replacement_cdm(Player,Age,Value)

result_basic.sort_values('Basic_Cluster',ascending=False)

result_basic

"""# **CDM Passing**"""

passing_data=pd.read_excel("https://github.com/TazeemKhan9/Football-Player-Replacement/blob/main/Original%20Data/Basic%20Passing.xlsx?raw=true")

passing_data

passing_data['Player'] =passing_data['Player'].str.split('\\', expand=True)[0]

passing_data["Age"] = passing_data["Age"].astype(str)

passing_data["Value_Num"] = passing_data["Value_Num"].astype(str)

passing_data['Short.Att%']=(passing_data['Short.Att']/passing_data['Total.Att'])*100

passing_data['Medium.Att%']=(passing_data['Medium.Att']/passing_data['Total.Att'])*100

passing_data['Long.Att%']=(passing_data['Long.Att']/passing_data['Total.Att'])*100

passing_data['Progressive%']=(passing_data['Prog']/passing_data['Total.Att'])*100

passing_data=passing_data.drop(['Rk','Born','Total.Cmp','Short.Cmp','Medium.Cmp','Long.Cmp','Short.Att','Medium.Att','Long.Att','Prog','1/3rd','PPA','A-xA','CrsPA'],axis=1)

passing_data=passing_data[passing_data['90s'] >=10]

passing_data=passing_data.drop('90s',axis=1)

cdm_passing = passing_data[passing_data['Pos']=='DM']

cdm_passing =cdm_passing.dropna() 

cdm_passing.reset_index(drop=True,inplace=True)

cdm_passing

from sklearn import preprocessing

scaler = preprocessing.MinMaxScaler()

cols=cdm_passing.select_dtypes([np.number]).columns

x=cdm_passing[cols]

x=x.fillna(0)

x_scaled = scaler.fit_transform(x)

X= pd.DataFrame(x_scaled)

from sklearn.decomposition import PCA

pca=PCA()

reduced_cdm_passing=pd.DataFrame(pca.fit_transform(X))

var=pca.explained_variance_ratio_.cumsum()

var

from sklearn.decomposition import PCA

pca = PCA(n_components = 6) # 2D PCA for the plot

reduced_cdm_passing = pd.DataFrame(pca.fit_transform(X))

reduced_cdm_passing

plt.figure(figsize=(10, 7))  
plt.title("Dendrograms")  
dend = shc.dendrogram(shc.linkage(reduced_cdm_passing, method='ward'))

Sum_of_squared_distances = []
K = range(1,15)
for k in K:
    km = KMeans(n_clusters=k)
    km = km.fit(reduced_cdm_passing)
    Sum_of_squared_distances.append(km.inertia_)
plt.plot(K, Sum_of_squared_distances, 'bx-')
plt.xlabel('k')
plt.ylabel('Sum_of_squared_distances')
plt.title('Elbow Method For Optimal k')
plt.show()

from sklearn.cluster import KMeans

# specify the number of clusters

kmeans = KMeans(n_clusters=3,random_state=2)

# fit the input data

kmeans = kmeans.fit(reduced_cdm_passing)

# get the cluster labels

labels = kmeans.predict(reduced_cdm_passing)

# centroid values

centroid = kmeans.cluster_centers_

#cluster values

adv_clusters = kmeans.labels_.tolist()

reduced_cdm_passing['Advance_Cluster'] = adv_clusters

reduced_cdm_passing['name'] = cdm_passing['Player']

reduced_cdm_passing.columns = ['PC1','PC2','PC3','PC4','PC5','PC6','Advance_Cluster', 'Name']

reduced_cdm_passing

cdm_passing['Advance_Cluster']=adv_clusters

cdm_passing_search=cdm_passing.sort_values('Advance_Cluster')

import matplotlib as mpl 
import matplotlib.pyplot as plt 
import matplotlib.gridspec as gridspec 
import matplotlib.patheffects as path_effects

#Selecting Team
title_font = "Alegreya Sans"
body_font = "Open Sans"
text_color = "w"
background = "#313332"
filler = "grey"
primary = "red"


fig, ax = plt.subplots(figsize=(20,20))
fig.set_facecolor(background)
ax.patch.set_facecolor(background)

x = reduced_cdm_passing.PC1
y = reduced_cdm_passing.PC2
txt = reduced_cdm_passing.Name
scatter=ax.scatter(x,y,s=120,c=adv_clusters,cmap='Spectral')

legend1 = ax.legend(*scatter.legend_elements(),
                    loc="upper right", title="Classes")
ax.add_artist(legend1)


ax.annotate
fig.text(0.15,0.91,"Goalkeeping Basic Stats",fontweight="bold",fontsize=22, fontfamily=title_font,color=text_color)

fig.text(0.15,0.89,"Top 5 European Leagues",fontweight="regular", fontsize=18,fontfamily=title_font, color=text_color)

#for i, txt in enumerate(txt):
#    ax.annotate(txt, (x[i], y[i]),color=text_color)

ax.set_xlabel("PC1", fontfamily=title_font, fontweight="bold", fontsize=12, color=text_color)
ax.set_ylabel("PC2", fontfamily=title_font, fontweight="bold", fontsize= 12, color=text_color)

plt.show()

cdm_passing_visual=cdm_passing_search.sort_values('Advance_Cluster')
cdm_passing_visual[cdm_passing_visual['Advance_Cluster']==0]

avg_cdm_passing=cdm_passing_visual[cdm_passing_visual['Advance_Cluster']==0].mean(axis=0)

avg_cdm_passing=pd.DataFrame(avg_cdm_passing)

cdm_passing_visual['Advance_Cluster']= cdm_passing_visual['Advance_Cluster'].astype(str)

cols=cdm_passing_visual.select_dtypes([np.number]).columns

cdm_passing_visual['Advance_Cluster']= cdm_passing_visual['Advance_Cluster'].astype(int)

avg_cdm_passing['Advance_Cluster 0']=cdm_passing_visual[cdm_passing_visual['Advance_Cluster']==0].mean(axis=0)

avg_cdm_passing['Advance_Cluster 1']=cdm_passing_visual[cdm_passing_visual['Advance_Cluster']==1].mean(axis=0)

avg_cdm_passing['Advance_Cluster 2']=cdm_passing_visual[cdm_passing_visual['Advance_Cluster']==2].mean(axis=0)


avg_cdm_passing.drop(0,axis=1,inplace=True)

avg_cdm_passing=avg_cdm_passing.drop('Advance_Cluster',axis=0)

avg_cdm_passing

heat=cdm_passing_visual[cdm_passing_visual['Advance_Cluster']==0].mean(axis=0)

heat=pd.DataFrame(heat)

cdm_passing_visual['Advance_Cluster']= cdm_passing_visual['Advance_Cluster'].astype(str)

cols=cdm_passing_visual.select_dtypes([np.number]).columns

cdm_passing_visual[cols]=(cdm_passing_visual[cols]-cdm_passing_visual[cols].min())/(cdm_passing_visual[cols].max()-cdm_passing_visual[cols].min())

cdm_passing_visual['Advance_Cluster']= cdm_passing_visual['Advance_Cluster'].astype(int)

heat['Advance_Cluster 0']=cdm_passing_visual[cdm_passing_visual['Advance_Cluster']==0].mean(axis=0)

heat['Advance_Cluster 1']=cdm_passing_visual[cdm_passing_visual['Advance_Cluster']==1].mean(axis=0)

heat['Advance_Cluster 2']=cdm_passing_visual[cdm_passing_visual['Advance_Cluster']==2].mean(axis=0)

cdm_passing_visual['Age']=cdm_passing_visual['Age'].astype(float)

cdm_passing_visual['Age']=cdm_passing_visual['Age'].astype(int)

cdm_passing_search['Age']=cdm_passing_search['Age'].astype(float)

cdm_passing_search['Age']=cdm_passing_search['Age'].astype(int)

cdm_passing_search['Value_Num']=cdm_passing_search['Value_Num'].astype(float)

cdm_passing_search['Value_Num']=cdm_passing_search['Value_Num'].astype(int)

heat=heat.drop(0,axis=1)

heat=heat.drop('Advance_Cluster',axis=0)

heat

sns.heatmap(heat, cmap="BuGn")

def club_cdm_passing(TeamName):
  return cdm_passing_search[cdm_passing_search['Squad'] == TeamName][['Player','Nation','Pos','Squad','Value','Value_Num','Age','Total.Att','Total.Cmp%','Total.TotDist','Total.PrgDist','Short.Cmp%','Medium.Cmp%','Long.Cmp%','Ast','xA','KP','Short.Att%','Medium.Att%','Long.Att%','Progressive%'	,'Advance_Cluster']]

def Replacement_cdm_passing(Player, age, value):
  
  Advance_Cluster_number=int(cdm_passing_search[cdm_passing_search['Player']==Player]['Advance_Cluster'])
  
  if Advance_Cluster_number==0:
  
    search_df= cdm_passing_search.query('Advance_Cluster == 0 and Age <= @age and Value_Num <= @value' )
  
  elif Advance_Cluster_number==1:
  
    search_df= cdm_passing_search.query('Advance_Cluster == 1 and Age <= @age and Value_Num <= @value' )
    
  elif Advance_Cluster_number==2:
  
    search_df= cdm_passing_search.query('Advance_Cluster == 2 and Age <= @age and Value_Num <= @value' )
  
  return search_df

result_cdm_passing=Replacement_cdm_passing(Player,Age,Value)
result_cdm_passing.sort_values('Advance_Cluster',ascending=False)

result_cdm_passing.drop(['Value','Value_Num','Pos','Squad','Age'],inplace=True,axis=1)

#result_advance['Advance_Cluster']=result_advance['Advance_Cluster'].replace(to_replace =[0,1,2],value =["Ball Playing","Defensive","Mix"])

output_cdm = pd.merge(result_basic,result_cdm_passing, how='inner', on='Player')

output_cdm

output_cdm[['Player','Nation','Pos','Value','Value_Num','Squad','Age','Basic_Cluster','Advance_Cluster']]

"""# **CM PASSING**"""

passing_data=pd.read_excel("https://github.com/TazeemKhan9/Football-Player-Replacement/blob/main/Original%20Data/Basic%20Passing.xlsx?raw=true")

passing_data

passing_data['Player'] =passing_data['Player'].str.split('\\', expand=True)[0]

passing_data["Age"] = passing_data["Age"].astype(str)

passing_data["Value_Num"] = passing_data["Value_Num"].astype(str)

passing_data['Short.Att%']=(passing_data['Short.Att']/passing_data['Total.Att'])*100

passing_data['Medium.Att%']=(passing_data['Medium.Att']/passing_data['Total.Att'])*100

passing_data['Long.Att%']=(passing_data['Long.Att']/passing_data['Total.Att'])*100

passing_data['Progressive%']=(passing_data['Prog']/passing_data['Total.Att'])*100

passing_data=passing_data.drop(['Rk','Born','Total.Cmp','Short.Cmp','Medium.Cmp','Long.Cmp','Short.Att','Medium.Att','Long.Att','Prog','1/3rd','A-xA'],axis=1)

passing_data=passing_data[passing_data['90s'] >=10]

passing_data=passing_data.drop('90s',axis=1)

cm_passing = passing_data[passing_data['Pos']=='CM']

cm_passing =cm_passing.dropna() 

cm_passing.reset_index(drop=True,inplace=True)

cm_passing

from sklearn import preprocessing

scaler = preprocessing.MinMaxScaler()

cols=cm_passing.select_dtypes([np.number]).columns

x=cm_passing[cols]

x=x.fillna(0)

x_scaled = scaler.fit_transform(x)

X= pd.DataFrame(x_scaled)

from sklearn.decomposition import PCA

pca=PCA()

reduced_cdm_passing=pd.DataFrame(pca.fit_transform(X))

var=pca.explained_variance_ratio_.cumsum()

var

from sklearn.decomposition import PCA

pca = PCA(n_components = 7) # 2D PCA for the plot

reduced_cm_passing = pd.DataFrame(pca.fit_transform(X))

reduced_cm_passing

plt.figure(figsize=(10, 7))  
plt.title("Dendrograms")  
dend = shc.dendrogram(shc.linkage(reduced_cm_passing, method='ward'))

Sum_of_squared_distances = []
K = range(1,15)
for k in K:
    km = KMeans(n_clusters=k)
    km = km.fit(reduced_cm_passing)
    Sum_of_squared_distances.append(km.inertia_)
plt.plot(K, Sum_of_squared_distances, 'bx-')
plt.xlabel('k')
plt.ylabel('Sum_of_squared_distances')
plt.title('Elbow Method For Optimal k')
plt.show()

from sklearn.cluster import KMeans

# specify the number of clusters

kmeans = KMeans(n_clusters=4,random_state=2)

# fit the input data

kmeans = kmeans.fit(reduced_cm_passing)

# get the cluster labels

labels = kmeans.predict(reduced_cm_passing)

# centroid values

centroid = kmeans.cluster_centers_

#cluster values

basic_clusters = kmeans.labels_.tolist()

reduced_cm_passing['Basic_Cluster'] = basic_clusters

reduced_cm_passing['name'] = cm_passing['Player']

reduced_cm_passing.columns = ['PC1','PC2','PC3','PC4','PC5','PC6','PC7','Basic_Cluster', 'Name']

reduced_cm_passing

cm_passing['Basic_Cluster']=basic_clusters

cm_passing_search=cm_passing.sort_values('Basic_Cluster')

import matplotlib as mpl 
import matplotlib.pyplot as plt 
import matplotlib.gridspec as gridspec 
import matplotlib.patheffects as path_effects

#Selecting Team
title_font = "Alegreya Sans"
body_font = "Open Sans"
text_color = "w"
background = "#313332"
filler = "grey"
primary = "red"


fig, ax = plt.subplots(figsize=(20,20))
fig.set_facecolor(background)
ax.patch.set_facecolor(background)

x = reduced_cm_passing.PC1
y = reduced_cm_passing.PC2
txt = reduced_cm_passing.Name
scatter=ax.scatter(x,y,s=120,c=basic_clusters,cmap='Spectral')

legend1 = ax.legend(*scatter.legend_elements(),
                    loc="upper right", title="Classes")
ax.add_artist(legend1)


ax.annotate
fig.text(0.15,0.91,"Goalkeeping Basic Stats",fontweight="bold",fontsize=22, fontfamily=title_font,color=text_color)

fig.text(0.15,0.89,"Top 5 European Leagues",fontweight="regular", fontsize=18,fontfamily=title_font, color=text_color)

#for i, txt in enumerate(txt):
#    ax.annotate(txt, (x[i], y[i]),color=text_color)

ax.set_xlabel("PC1", fontfamily=title_font, fontweight="bold", fontsize=12, color=text_color)
ax.set_ylabel("PC2", fontfamily=title_font, fontweight="bold", fontsize= 12, color=text_color)

plt.show()

cm_passing_visual=cm_passing_search.sort_values('Basic_Cluster')
cm_passing_visual[cm_passing_visual['Basic_Cluster']==1]

avg_cm_passing=cm_passing_visual[cm_passing_visual['Basic_Cluster']==0].mean(axis=0)

avg_cm_passing=pd.DataFrame(avg_cm_passing)

cm_passing_visual['Basic_Cluster']= cm_passing_visual['Basic_Cluster'].astype(str)

cols=cm_passing_visual.select_dtypes([np.number]).columns

cm_passing_visual['Basic_Cluster']= cm_passing_visual['Basic_Cluster'].astype(int)

avg_cm_passing['Basic_Cluster 0']=cm_passing_visual[cm_passing_visual['Basic_Cluster']==0].mean(axis=0)

avg_cm_passing['Basic_Cluster 1']=cm_passing_visual[cm_passing_visual['Basic_Cluster']==1].mean(axis=0)

avg_cm_passing['Basic_Cluster 2']=cm_passing_visual[cm_passing_visual['Basic_Cluster']==2].mean(axis=0)

avg_cm_passing['Basic_Cluster 3']=cm_passing_visual[cm_passing_visual['Basic_Cluster']==3].mean(axis=0)

avg_cm_passing.drop(0,axis=1,inplace=True)

avg_cm_passing=avg_cm_passing.drop('Basic_Cluster',axis=0)

avg_cm_passing

heat=cm_passing_visual[cm_passing_visual['Basic_Cluster']==0].mean(axis=0)

heat=pd.DataFrame(heat)

cm_passing_visual['Basic_Cluster']= cm_passing_visual['Basic_Cluster'].astype(str)

cols=cm_passing_visual.select_dtypes([np.number]).columns

cm_passing_visual[cols]=(cm_passing_visual[cols]-cm_passing_visual[cols].min())/(cm_passing_visual[cols].max()-cm_passing_visual[cols].min())

cm_passing_visual['Basic_Cluster']= cm_passing_visual['Basic_Cluster'].astype(int)

heat['Basic_Cluster 0']=cm_passing_visual[cm_passing_visual['Basic_Cluster']==0].mean(axis=0)

heat['Basic_Cluster 1']=cm_passing_visual[cm_passing_visual['Basic_Cluster']==1].mean(axis=0)

heat['Basic_Cluster 2']=cm_passing_visual[cm_passing_visual['Basic_Cluster']==2].mean(axis=0)

heat['Basic_Cluster 3']=cm_passing_visual[cm_passing_visual['Basic_Cluster']==3].mean(axis=0)

cm_passing_visual['Age']=cm_passing_visual['Age'].astype(float)

cm_passing_visual['Age']=cm_passing_visual['Age'].astype(int)

cm_passing_search['Age']=cm_passing_search['Age'].astype(float)

cm_passing_search['Age']=cm_passing_search['Age'].astype(int)

cm_passing_search['Value_Num']=cm_passing_search['Value_Num'].astype(float)

cm_passing_search['Value_Num']=cm_passing_search['Value_Num'].astype(int)

heat=heat.drop(0,axis=1)

heat=heat.drop('Basic_Cluster',axis=0)

heat

heat.to_excel("Heatmap_CM_Passing.xlsx")

sns.heatmap(heat, cmap="BuGn")

def club_cm_passing(TeamName):
  return cm_passing_search[cm_passing_search['Squad'] == TeamName][['Player','Nation','Pos','Squad','Value','Value_Num','Age','Total.Att','Total.Cmp%','Total.TotDist','Total.PrgDist','Short.Cmp%','Medium.Cmp%','Long.Cmp%','Ast','xA','KP','PPA','CrsPA','Short.Att%','Medium.Att%','Long.Att%','Progressive%'	,'Basic_Cluster']]

TeamName= input('Enter your team name : ')
club_cm_passing(TeamName)

def Replacement_cm_passing(Player, age, value):
  
  Basic_Cluster_number=int(cm_passing_search[cm_passing_search['Player']==Player]['Basic_Cluster'])
  
  if Basic_Cluster_number==0:
  
    search_df= cm_passing_search.query('Basic_Cluster == 0 and Age <= @age and Value_Num <= @value' )
  
  elif Basic_Cluster_number==1:
  
    search_df= cm_passing_search.query('Basic_Cluster == 3 and Age <= @age and Value_Num <= @value' )
    
  elif Basic_Cluster_number==2:
  
    search_df= cm_passing_search.query('Basic_Cluster == 2 and Age <= @age and Value_Num <= @value' )
  
  elif Basic_Cluster_number==3:
  
    search_df= cm_passing_search.query('Basic_Cluster == 3 and Age <= @age and Value_Num <= @value' )
  
  return search_df

Player=input('Enter player to be replaced :')
Age=int(input('Enter the age of the player you want to buy:'))
Value=int(input('Enter the budget for the player you want to buy :'))
result_cm_passing=Replacement_cm_passing(Player,Age,Value)
result_cm_passing.sort_values('Basic_Cluster',ascending=False)

"""# **CM SHOOTING**"""

attacking_data=pd.read_excel("https://github.com/TazeemKhan9/Football-Player-Replacement/blob/main/Original%20Data/Shooting%20Data.xlsx?raw=true")

attacking_data

attacking_data["Age"] = attacking_data["Age"].astype(str)

attacking_data["Value_Num"] = attacking_data["Value_Num"].astype(str)

attacking_data['Gls/90']=attacking_data['Gls']/attacking_data['90s']

attacking_data['xG/90']=attacking_data['xG']/attacking_data['90s']

attacking_data['npxG/90']=attacking_data['npxG']/attacking_data['90s']

attacking_data['G-xG/90']=attacking_data['G-xG']/attacking_data['90s']

attacking_data['np:G-xG/90']=attacking_data['np:G-xG']/attacking_data['90s']

attacking_data=attacking_data.drop(['Rk','Nation','Links','Born','Gls','Sh','SoT','FK','PK','PKatt','np:G-xG','G-xG','npxG','xG','npxG'],axis=1)

attacking_data=attacking_data[attacking_data['90s'] >=10]

cm_attacking=attacking_data[attacking_data['Pos']=='CM']

cm_attacking=cm_attacking.drop('90s',axis=1)

cm_attacking.reset_index(drop=True,inplace=True)

cm_attacking=cm_attacking.dropna() 

cm_attacking

from sklearn import preprocessing

scaler = preprocessing.MinMaxScaler()

cols=cm_attacking.select_dtypes([np.number]).columns

x=cm_attacking[cols]

#x=x.fillna(0)

x_scaled = scaler.fit_transform(x)

X= pd.DataFrame(x_scaled)

X

from sklearn.decomposition import PCA

pca=PCA()

reduced_cdm=pd.DataFrame(pca.fit_transform(X))

var=pca.explained_variance_ratio_.cumsum()

var

from sklearn.decomposition import PCA

pca = PCA(n_components = 5) # 2D PCA for the plot

reduced_cm = pd.DataFrame(pca.fit_transform(X))

reduced_cm

plt.figure(figsize=(10, 7))  

plt.title("Dendrograms")  

dend = shc.dendrogram(shc.linkage(reduced_cm, method='ward'))

from sklearn.cluster import KMeans

sse = {}

for k in range(1, 15):

    kmeans = KMeans(n_clusters=k).fit(reduced_cm)

    #reduced_cdm["clusters"] = kmeans.labels_

    #print(data["clusters"])

    sse[k] = kmeans.inertia_ # Inertia: Sum of distances of samples to their closest cluster center

plt.figure()

plt.plot(list(sse.keys()), list(sse.values()))

plt.xlabel("Number of cluster")

plt.ylabel("SSE")

plt.show()

from sklearn.cluster import KMeans
# specify the number of clusters

kmeans = KMeans(n_clusters=3,random_state=2)

# fit the input data

kmeans = kmeans.fit(reduced_cm)

# get the cluster labels

labels = kmeans.predict(reduced_cm)

# centroid values

centroid = kmeans.cluster_centers_

# cluster values

clusters = kmeans.labels_.tolist()

reduced_cm['cluster'] = clusters

reduced_cm['name'] = cm_attacking['Player']

reduced_cm.columns = ['PC1','PC2','PC3','PC4','PC5','Advance_Cluster','Name']

reduced_cm

cm_attacking['Advance_Cluster']=clusters

cm_attacking_search=cm_attacking.sort_values('Advance_Cluster')

import matplotlib as mpl 
import matplotlib.pyplot as plt 
import matplotlib.gridspec as gridspec 
import matplotlib.patheffects as path_effects

#Selecting Team
title_font = "Alegreya Sans"
body_font = "Open Sans"
text_color = "w"
background = "#313332"
filler = "grey"
primary = "red"


fig, ax = plt.subplots(figsize=(20,20))
fig.set_facecolor(background)
ax.patch.set_facecolor(background)

x = reduced_cm.PC1
y = reduced_cm.PC2
txt = reduced_cm.Name
c=reduced_cm.Advance_Cluster
scatter=ax.scatter(x,y,s=120,c=c,cmap='Spectral')

legend1 = ax.legend(*scatter.legend_elements(),
                    loc="upper right", title="Classes")
ax.add_artist(legend1)


ax.annotate
fig.text(0.15,0.91,"Goalkeeping Basic Stats",fontweight="bold",fontsize=22, fontfamily=title_font,color=text_color)

fig.text(0.15,0.89,"Top 5 European Leagues",fontweight="regular", fontsize=18,fontfamily=title_font, color=text_color)

for i, txt in enumerate(txt):
    ax.annotate(txt, (x[i], y[i]),color=text_color)

ax.set_xlabel("PC1", fontfamily=title_font, fontweight="bold", fontsize=12, color=text_color)
ax.set_ylabel("PC2", fontfamily=title_font, fontweight="bold", fontsize= 12, color=text_color)

plt.show()

cm_attacking_visual=cm_attacking_search.sort_values('Advance_Cluster')
cm_attacking_visual[cm_attacking_visual['Advance_Cluster']==0]

avg_cm=cm_attacking_visual[cm_attacking_visual['Advance_Cluster']==0].mean(axis=0)

avg_cm=pd.DataFrame(avg_cm)

cm_attacking_visual['Advance_Cluster']= cm_attacking_visual['Advance_Cluster'].astype(str)

cols=cm_attacking_visual.select_dtypes([np.number]).columns

cm_attacking_visual['Advance_Cluster']= cm_attacking_visual['Advance_Cluster'].astype(int)

avg_cm['Advance_Cluster 0']=cm_attacking_visual[cm_attacking_visual['Advance_Cluster']==0].mean(axis=0)

avg_cm['Advance_Cluster 1']=cm_attacking_visual[cm_attacking_visual['Advance_Cluster']==1].mean(axis=0)

avg_cm['Advance_Cluster 2']=cm_attacking_visual[cm_attacking_visual['Advance_Cluster']==2].mean(axis=0)

#avg_cm['Advance_Cluster 3']=cm_attacking_visual[cm_attacking_visual['Advance_Cluster']==3].mean(axis=0)

#avg_cm['Advance_Cluster 4']=cm_attacking_visual[cm_attacking_visual['Advance_Cluster']==4].mean(axis=0)

avg_cm.drop(0,axis=1,inplace=True)

avg_cm=avg_cm.drop('Advance_Cluster',axis=0)

avg_cm

heat=cm_attacking_visual[cm_attacking_visual['Advance_Cluster']==0].mean(axis=0)

heat=pd.DataFrame(heat)

cm_attacking_visual['Advance_Cluster']= cm_attacking_visual['Advance_Cluster'].astype(str)

cols=cm_attacking_visual.select_dtypes([np.number]).columns

cm_attacking_visual[cols]=(cm_attacking_visual[cols]-cm_attacking_visual[cols].min())/(cm_attacking_visual[cols].max()-cm_attacking_visual[cols].min())

cm_attacking_visual['Advance_Cluster']= cm_attacking_visual['Advance_Cluster'].astype(int)

heat['Cluster 0']=cm_attacking_visual[cm_attacking_visual['Advance_Cluster']==0].mean(axis=0)

heat['Cluster 1']=cm_attacking_visual[cm_attacking_visual['Advance_Cluster']==1].mean(axis=0)

heat['Cluster 2']=cm_attacking_visual[cm_attacking_visual['Advance_Cluster']==2].mean(axis=0)

heat.drop(0,axis=1,inplace=True)

heat=heat.drop('Advance_Cluster',axis=0)

cm_attacking_visual['Age']=cm_attacking_visual['Age'].astype(float)

cm_attacking_visual['Age']=cm_attacking_visual['Age'].astype(int)

cm_attacking_search['Age']=cm_attacking_search['Age'].astype(float)

cm_attacking_search['Age']=cm_attacking_search['Age'].astype(int)

cm_attacking_search['Value_Num']=cm_attacking_search['Value_Num'].astype(float)

cm_attacking_search['Value_Num']=cm_attacking_search['Value_Num'].astype(int)

#heat=heat.drop('Age',axis=0)

heat

import seaborn as sns
sns.heatmap(heat, cmap="BuGn")

def club_cm_attacking(TeamName):
  return cm_attacking_search[cm_attacking_search['Squad'] == TeamName][['Player','Pos','Squad','Value','Value_Num','SoT%','Sh/90','SoT/90','G/Sh','G/SoT','npxG/Sh','SCA90','GCA90','Gls/90','xG/90','npxG/90','G-xG/90','np:G-xG/90','Advance_Cluster']]

TeamName= input('Enter your team name : ')
club_cm_attacking(TeamName)

def Replacement_cm_attacking(Player, age, value):
  
  Advance_Cluster_number=int(cm_attacking_search[cm_attacking_search['Player']==Player]['Advance_Cluster'])
  
  if Advance_Cluster_number==0:
  
    search_df= cm_attacking_search.query('Advance_Cluster == 0 and Age <= @age and Value_Num <= @value' )
  
  elif Advance_Cluster_number==1:
  
    search_df= cm_attacking_search.query('Advance_Cluster == 1 and Age <= @age and Value_Num <= @value' )
    
  elif Advance_Cluster_number==2:
  
    search_df= cm_attacking_search.query('Advance_Cluster == 2 and Age <= @age and Value_Num <= @value' )
  
  return search_df

Player=input('Enter player to be replaced :')

Age=int(input('Enter the age of the player you want to buy:'))

Value=int(input('Enter the budget for the player you want to buy :'))

result_attacking_cm=Replacement_cm_attacking(Player,Age,Value)

result_attacking_cm.sort_values('Advance_Cluster',ascending=False)

result_attacking_cm

result_attacking_cm.drop(['Value','Value_Num','Pos','Squad','Age'],inplace=True,axis=1)

#result_advance['Advance_Cluster']=result_advance['Advance_Cluster'].replace(to_replace =[0,1,2],value =["Ball Playing","Defensive","Mix"])

output_cm = pd.merge(result_cm_passing,result_attacking_cm, how='inner', on='Player')

output_cm

output_cm[['Player','Nation','Pos','Value','Value_Num','Squad','Age','Basic_Cluster','Advance_Cluster']]

"""# **AM ATTACKING**"""

attacking_data=pd.read_excel("https://github.com/TazeemKhan9/Football-Player-Replacement/blob/main/Original%20Data/Shooting%20Data.xlsx?raw=true")

attacking_data

attacking_data["Age"] = attacking_data["Age"].astype(str)

attacking_data["Value_Num"] = attacking_data["Value_Num"].astype(str)

attacking_data['Gls/90']=attacking_data['Gls']/attacking_data['90s']

attacking_data['xG/90']=attacking_data['xG']/attacking_data['90s']

attacking_data['npxG/90']=attacking_data['npxG']/attacking_data['90s']

attacking_data['G-xG/90']=attacking_data['G-xG']/attacking_data['90s']

attacking_data['np:G-xG/90']=attacking_data['np:G-xG']/attacking_data['90s']

attacking_data=attacking_data.drop(['Rk','Nation','Links','Born','Gls','Sh','SoT','FK','PK','PKatt','np:G-xG','G-xG','npxG','xG','npxG'],axis=1)

attacking_data=attacking_data[attacking_data['90s'] >=10]

am_attacking=attacking_data[attacking_data['Pos']=='AM']

am_attacking=am_attacking.drop('90s',axis=1)

am_attacking.reset_index(drop=True,inplace=True)

am_attacking=am_attacking.dropna() 

am_attacking

from sklearn import preprocessing

scaler = preprocessing.MinMaxScaler()

cols=am_attacking.select_dtypes([np.number]).columns

x=am_attacking[cols]

#x=x.fillna(0)

x_scaled = scaler.fit_transform(x)

X= pd.DataFrame(x_scaled)

X

from sklearn.decomposition import PCA

pca=PCA()

reduced_cdm=pd.DataFrame(pca.fit_transform(X))

var=pca.explained_variance_ratio_.cumsum()

var

from sklearn.decomposition import PCA

pca = PCA(n_components = 5) # 2D PCA for the plot

reduced_am = pd.DataFrame(pca.fit_transform(X))

reduced_am

plt.figure(figsize=(10, 7))  

plt.title("Dendrograms")  

dend = shc.dendrogram(shc.linkage(reduced_am, method='ward'))

from sklearn.cluster import KMeans

sse = {}

for k in range(1, 15):

    kmeans = KMeans(n_clusters=k).fit(reduced_am)

    #reduced_cdm["clusters"] = kmeans.labels_

    #print(data["clusters"])

    sse[k] = kmeans.inertia_ # Inertia: Sum of distances of samples to their closest cluster center

plt.figure()

plt.plot(list(sse.keys()), list(sse.values()))

plt.xlabel("Number of cluster")

plt.ylabel("SSE")

plt.show()

from sklearn.cluster import KMeans
# specify the number of clusters

kmeans = KMeans(n_clusters=3,random_state=2)

# fit the input data

kmeans = kmeans.fit(reduced_am)

# get the cluster labels

labels = kmeans.predict(reduced_am)

# centroid values

centroid = kmeans.cluster_centers_

# cluster values

clusters = kmeans.labels_.tolist()

reduced_am['cluster'] = clusters

reduced_am['name'] = am_attacking['Player']

reduced_am.columns = ['PC1','PC2','PC3','PC4','PC5','Basic_Cluster','Name']

reduced_am

am_attacking['Basic_Cluster']=clusters

am_attacking_search=am_attacking.sort_values('Basic_Cluster')

import matplotlib as mpl 
import matplotlib.pyplot as plt 
import matplotlib.gridspec as gridspec 
import matplotlib.patheffects as path_effects

#Selecting Team
title_font = "Alegreya Sans"
body_font = "Open Sans"
text_color = "w"
background = "#313332"
filler = "grey"
primary = "red"


fig, ax = plt.subplots(figsize=(15,15))
fig.set_facecolor(background)
ax.patch.set_facecolor(background)

x = reduced_am.PC1
y = reduced_am.PC2
txt = reduced_am.Name
c=reduced_am.Basic_Cluster
scatter=ax.scatter(x,y,s=120,c=c,cmap='Spectral')

legend1 = ax.legend(*scatter.legend_elements(),
                    loc="upper right", title="Classes")
ax.add_artist(legend1)


ax.annotate
fig.text(0.15,0.91,"Goalkeeping Basic Stats",fontweight="bold",fontsize=22, fontfamily=title_font,color=text_color)

fig.text(0.15,0.89,"Top 5 European Leagues",fontweight="regular", fontsize=18,fontfamily=title_font, color=text_color)

for i, txt in enumerate(txt):
    ax.annotate(txt, (x[i], y[i]),color=text_color)

ax.set_xlabel("PC1", fontfamily=title_font, fontweight="bold", fontsize=12, color=text_color)
ax.set_ylabel("PC2", fontfamily=title_font, fontweight="bold", fontsize= 12, color=text_color)

plt.show()

am_attacking_visual=am_attacking_search.sort_values('Basic_Cluster')
am_attacking_visual[am_attacking_visual['Basic_Cluster']==1]

avg_am=am_attacking_visual[am_attacking_visual['Basic_Cluster']==0].mean(axis=0)

avg_am=pd.DataFrame(avg_am)

am_attacking_visual['Basic_Cluster']= am_attacking_visual['Basic_Cluster'].astype(str)

cols=am_attacking_visual.select_dtypes([np.number]).columns

am_attacking_visual['Basic_Cluster']= am_attacking_visual['Basic_Cluster'].astype(int)

avg_am['Basic_Cluster 0']=am_attacking_visual[am_attacking_visual['Basic_Cluster']==0].mean(axis=0)

avg_am['Basic_Cluster 1']=am_attacking_visual[am_attacking_visual['Basic_Cluster']==1].mean(axis=0)

avg_am['Basic_Cluster 2']=am_attacking_visual[am_attacking_visual['Basic_Cluster']==2].mean(axis=0)

#avg_am['Basic_Cluster 3']=am_attacking_visual[am_attacking_visual['Basic_Cluster']==3].mean(axis=0)

#avg_am['Basic_Cluster 4']=am_attacking_visual[am_attacking_visual['Basic_Cluster']==4].mean(axis=0)

avg_am.drop(0,axis=1,inplace=True)

avg_am=avg_am.drop('Basic_Cluster',axis=0)

avg_am

heat=am_attacking_visual[am_attacking_visual['Basic_Cluster']==0].mean(axis=0)

heat=pd.DataFrame(heat)

am_attacking_visual['Basic_Cluster']= am_attacking_visual['Basic_Cluster'].astype(str)

cols=am_attacking_visual.select_dtypes([np.number]).columns

am_attacking_visual[cols]=(am_attacking_visual[cols]-am_attacking_visual[cols].min())/(am_attacking_visual[cols].max()-am_attacking_visual[cols].min())

am_attacking_visual['Basic_Cluster']= am_attacking_visual['Basic_Cluster'].astype(int)

heat['Cluster 0']=am_attacking_visual[am_attacking_visual['Basic_Cluster']==0].mean(axis=0)

heat['Cluster 1']=am_attacking_visual[am_attacking_visual['Basic_Cluster']==1].mean(axis=0)

heat['Cluster 2']=am_attacking_visual[am_attacking_visual['Basic_Cluster']==2].mean(axis=0)

#heat['Cluster 3']=am_attacking_visual[am_attacking_visual['Basic_Cluster']==3].mean(axis=0)

#heat['Cluster 4']=am_attacking_visual[am_attacking_visual['Basic_Cluster']==4].mean(axis=0)

heat.drop(0,axis=1,inplace=True)

heat=heat.drop('Basic_Cluster',axis=0)

am_attacking_visual['Age']=am_attacking_visual['Age'].astype(float)

am_attacking_visual['Age']=am_attacking_visual['Age'].astype(int)

am_attacking_search['Age']=am_attacking_search['Age'].astype(float)

am_attacking_search['Age']=am_attacking_search['Age'].astype(int)

am_attacking_search['Value_Num']=am_attacking_search['Value_Num'].astype(float)

am_attacking_search['Value_Num']=am_attacking_search['Value_Num'].astype(int)

#heat=heat.drop('Age',axis=0)

heat

heat.to_excel("Heatmap_AM_Shooting.xlsx")

import seaborn as sns
sns.heatmap(heat, cmap="BuGn")

def club_am_attacking(TeamName):
  return am_attacking_search[am_attacking_search['Squad'] == TeamName][['Player','Pos','Squad','Value','Value_Num','SoT%','Sh/90','SoT/90','G/Sh','G/SoT','npxG/Sh','SCA90','GCA90','Gls/90','xG/90','npxG/90','G-xG/90','np:G-xG/90','Basic_Cluster']]

TeamName= input('Enter your team name : ')
club_am_attacking(TeamName)

def Replacement_am_attacking(Player, age, value):
  
  Basic_Cluster_number=int(am_attacking_search[am_attacking_search['Player']==Player]['Basic_Cluster'])
  
  if Basic_Cluster_number==0:
  
    search_df= am_attacking_search.query('Basic_Cluster == 0 and Age <= @age and Value_Num <= @value' )
  
  elif Basic_Cluster_number==1:
  
    search_df= am_attacking_search.query('Basic_Cluster == 0 or Basic_Cluster == 2 and Age <= @age and Value_Num <= @value' )
    
  elif Basic_Cluster_number==2:
  
    search_df= am_attacking_search.query('Basic_Cluster == 2 and Age <= @age and Value_Num <= @value' )
  
  return search_df

Player=input('Enter player to be replaced :')

Age=int(input('Enter the age of the player you want to buy:'))

Value=int(input('Enter the budget for the player you want to buy :'))

result_attacking_am=Replacement_am_attacking(Player,Age,Value)

result_attacking_am.sort_values('Basic_Cluster',ascending=False)

result_attacking_am

"""# **AM PASSING**"""

passing_data=pd.read_excel("https://github.com/TazeemKhan9/Football-Player-Replacement/blob/main/Original%20Data/Basic%20Passing.xlsx?raw=true")

passing_data

passing_data['Player'] =passing_data['Player'].str.split('\\', expand=True)[0]

passing_data["Age"] = passing_data["Age"].astype(str)

passing_data["Value_Num"] = passing_data["Value_Num"].astype(str)

passing_data['Short.Att%']=(passing_data['Short.Att']/passing_data['Total.Att'])*100

passing_data['Medium.Att%']=(passing_data['Medium.Att']/passing_data['Total.Att'])*100

passing_data['Long.Att%']=(passing_data['Long.Att']/passing_data['Total.Att'])*100

passing_data['Progressive%']=(passing_data['Prog']/passing_data['Total.Att'])*100

passing_data=passing_data.drop(['Rk','Born','Total.Cmp','Short.Cmp','Medium.Cmp','Long.Cmp','Short.Att','Medium.Att','Long.Att','Prog','1/3rd','A-xA'],axis=1)

passing_data=passing_data[passing_data['90s'] >=10]

passing_data=passing_data.drop('90s',axis=1)

am_passing = passing_data[passing_data['Pos']=='AM']

am_passing =am_passing.dropna() 

am_passing.reset_index(drop=True,inplace=True)

am_passing

from sklearn import preprocessing

scaler = preprocessing.MinMaxScaler()

cols=am_passing.select_dtypes([np.number]).columns

x=am_passing[cols]

x=x.fillna(0)

x_scaled = scaler.fit_transform(x)

X= pd.DataFrame(x_scaled)

from sklearn.decomposition import PCA

pca=PCA()

reduced_cdm_passing=pd.DataFrame(pca.fit_transform(X))

var=pca.explained_variance_ratio_.cumsum()

var

from sklearn.decomposition import PCA

pca = PCA(n_components = 6) # 2D PCA for the plot

reduced_am_passing = pd.DataFrame(pca.fit_transform(X))

reduced_am_passing

plt.figure(figsize=(10, 7))  
plt.title("Dendrograms")  
dend = shc.dendrogram(shc.linkage(reduced_am_passing, method='ward'))

Sum_of_squared_distances = []
K = range(1,15)
for k in K:
    km = KMeans(n_clusters=k)
    km = km.fit(reduced_am_passing)
    Sum_of_squared_distances.append(km.inertia_)
plt.plot(K, Sum_of_squared_distances, 'bx-')
plt.xlabel('k')
plt.ylabel('Sum_of_squared_distances')
plt.title('Elbow Method For Optimal k')
plt.show()

from sklearn.cluster import KMeans

# specify the number of clusters

kmeans = KMeans(n_clusters=2,random_state=2)

# fit the input data

kmeans = kmeans.fit(reduced_am_passing)

# get the cluster labels

labels = kmeans.predict(reduced_am_passing)

# centroid values

centroid = kmeans.cluster_centers_

#cluster values

advance_clusters = kmeans.labels_.tolist()

reduced_am_passing['Advance_Cluster'] = advance_clusters

reduced_am_passing['name'] = am_passing['Player']

reduced_am_passing.columns = ['PC1','PC2','PC3','PC4','PC5','PC6','Advance_Cluster', 'Name']

reduced_am_passing

am_passing['Advance_Cluster']=advance_clusters

am_passing_search=am_passing.sort_values('Advance_Cluster')

import matplotlib as mpl 
import matplotlib.pyplot as plt 
import matplotlib.gridspec as gridspec 
import matplotlib.patheffects as path_effects

#Selecting Team
title_font = "Alegreya Sans"
body_font = "Open Sans"
text_color = "w"
background = "#313332"
filler = "grey"
primary = "red"


fig, ax = plt.subplots(figsize=(20,20))
fig.set_facecolor(background)
ax.patch.set_facecolor(background)

x = reduced_am_passing.PC1
y = reduced_am_passing.PC2
txt = reduced_am_passing.Name
scatter=ax.scatter(x,y,s=120,c=advance_clusters,cmap='Spectral')

legend1 = ax.legend(*scatter.legend_elements(),
                    loc="upper right", title="Classes")
ax.add_artist(legend1)


ax.annotate
fig.text(0.15,0.91,"Goalkeeping Basic Stats",fontweight="bold",fontsize=22, fontfamily=title_font,color=text_color)

fig.text(0.15,0.89,"Top 5 European Leagues",fontweight="regular", fontsize=18,fontfamily=title_font, color=text_color)

for i, txt in enumerate(txt):
    ax.annotate(txt, (x[i], y[i]),color=text_color)

ax.set_xlabel("PC1", fontfamily=title_font, fontweight="bold", fontsize=12, color=text_color)
ax.set_ylabel("PC2", fontfamily=title_font, fontweight="bold", fontsize= 12, color=text_color)

plt.show()

am_passing_visual=am_passing_search.sort_values('Advance_Cluster')
am_passing_visual[am_passing_visual['Advance_Cluster']==1]

avg_am_passing=am_passing_visual[am_passing_visual['Advance_Cluster']==0].mean(axis=0)

avg_am_passing=pd.DataFrame(avg_am_passing)

am_passing_visual['Advance_Cluster']= am_passing_visual['Advance_Cluster'].astype(str)

cols=am_passing_visual.select_dtypes([np.number]).columns

am_passing_visual['Advance_Cluster']= am_passing_visual['Advance_Cluster'].astype(int)

avg_am_passing['Advance_Cluster 0']=am_passing_visual[am_passing_visual['Advance_Cluster']==0].mean(axis=0)

avg_am_passing['Advance_Cluster 1']=am_passing_visual[am_passing_visual['Advance_Cluster']==1].mean(axis=0)

#avg_am_passing['Advance_Cluster 2']=am_passing_visual[am_passing_visual['Advance_Cluster']==2].mean(axis=0)

#avg_am_passing['Advance_Cluster 3']=am_passing_visual[am_passing_visual['Advance_Cluster']==3].mean(axis=0)

avg_am_passing.drop(0,axis=1,inplace=True)

avg_am_passing=avg_am_passing.drop('Advance_Cluster',axis=0)

avg_am_passing

heat=am_passing_visual[am_passing_visual['Advance_Cluster']==0].mean(axis=0)

heat=pd.DataFrame(heat)

am_passing_visual['Advance_Cluster']= am_passing_visual['Advance_Cluster'].astype(str)

cols=am_passing_visual.select_dtypes([np.number]).columns

am_passing_visual[cols]=(am_passing_visual[cols]-am_passing_visual[cols].min())/(am_passing_visual[cols].max()-am_passing_visual[cols].min())

am_passing_visual['Advance_Cluster']= am_passing_visual['Advance_Cluster'].astype(int)

heat['Advance_Cluster 0']=am_passing_visual[am_passing_visual['Advance_Cluster']==0].mean(axis=0)

heat['Advance_Cluster 1']=am_passing_visual[am_passing_visual['Advance_Cluster']==1].mean(axis=0)

#heat['Advance_Cluster 2']=am_passing_visual[am_passing_visual['Advance_Cluster']==2].mean(axis=0)

#heat['Advance_Cluster 3']=am_passing_visual[am_passing_visual['Advance_Cluster']==3].mean(axis=0)

am_passing_visual['Age']=am_passing_visual['Age'].astype(float)

am_passing_visual['Age']=am_passing_visual['Age'].astype(int)

am_passing_search['Age']=am_passing_search['Age'].astype(float)

am_passing_search['Age']=am_passing_search['Age'].astype(int)

am_passing_search['Value_Num']=am_passing_search['Value_Num'].astype(float)

am_passing_search['Value_Num']=am_passing_search['Value_Num'].astype(int)

heat=heat.drop(0,axis=1)

heat=heat.drop('Advance_Cluster',axis=0)

heat

sns.heatmap(heat, cmap="BuGn")

def club_am_passing(TeamName):
  return am_passing_search[am_passing_search['Squad'] == TeamName][['Player','Nation','Pos','Squad','Value','Value_Num','Age','Total.Att','Total.Cmp%','Total.TotDist','Total.PrgDist','Short.Cmp%','Medium.Cmp%','Long.Cmp%','Ast','xA','KP','PPA','CrsPA','Short.Att%','Medium.Att%','Long.Att%','Progressive%'	,'Advance_Cluster']]

def Replacement_am_passing(Player, age, value):
  
  Advance_Cluster_number=int(am_passing_search[am_passing_search['Player']==Player]['Advance_Cluster'])
  
  if Advance_Cluster_number==0:
  
    search_df= am_passing_search.query('Advance_Cluster == 0 and Age <= @age and Value_Num <= @value' )
  
  elif Advance_Cluster_number==1:
  
    search_df= am_passing_search.query('Advance_Cluster == 1 or Advance_Cluster == 0 and Age <= @age and Value_Num <= @value' )
  
  return search_df

result_passing_am=Replacement_am_passing(Player,Age,Value)

result_passing_am.sort_values('Advance_Cluster',ascending=False)

result_passing_am

result_passing_am.drop(['Value','Value_Num','Pos','Squad','Age'],inplace=True,axis=1)

#result_advance['Advance_Cluster']=result_advance['Advance_Cluster'].replace(to_replace =[0,1,2],value =["Ball Playing","Defensive","Mix"])

output_am = pd.merge(result_passing_am,result_attacking_am, how='inner', on='Player')

output_am

output_am[['Player','Nation','Pos','Value','Value_Num','Squad','Age','Basic_Cluster','Advance_Cluster']]

"""# **LW SHOOTING**"""

attacking_data=pd.read_excel("https://github.com/TazeemKhan9/Football-Player-Replacement/blob/main/Original%20Data/Shooting%20Data.xlsx?raw=true")

attacking_data

attacking_data["Age"] = attacking_data["Age"].astype(str)

attacking_data["Value_Num"] = attacking_data["Value_Num"].astype(str)

attacking_data['Gls/90']=attacking_data['Gls']/attacking_data['90s']

attacking_data['xG/90']=attacking_data['xG']/attacking_data['90s']

attacking_data['npxG/90']=attacking_data['npxG']/attacking_data['90s']

attacking_data['G-xG/90']=attacking_data['G-xG']/attacking_data['90s']

attacking_data['np:G-xG/90']=attacking_data['np:G-xG']/attacking_data['90s']

attacking_data=attacking_data.drop(['Rk','Nation','Links','Born','Gls','Sh','SoT','FK','PK','PKatt','np:G-xG','G-xG','npxG','xG','npxG'],axis=1)

attacking_data=attacking_data[attacking_data['90s'] >=10]

lw_attacking=attacking_data[attacking_data['Pos']=='LW']

lw_attacking=lw_attacking.drop('90s',axis=1)

lw_attacking.reset_index(drop=True,inplace=True)

lw_attacking=lw_attacking.dropna() 

lw_attacking

from sklearn import preprocessing

scaler = preprocessing.MinMaxScaler()

cols=lw_attacking.select_dtypes([np.number]).columns

x=lw_attacking[cols]

#x=x.fillna(0)

x_scaled = scaler.fit_transform(x)

X= pd.DataFrame(x_scaled)

X

from sklearn.decomposition import PCA

pca=PCA()

reduced_lw=pd.DataFrame(pca.fit_transform(X))

var=pca.explained_variance_ratio_.cumsum()

var

from sklearn.decomposition import PCA

pca = PCA(n_components = 5) # 2D PCA for the plot

reduced_lw = pd.DataFrame(pca.fit_transform(X))

reduced_lw

plt.figure(figsize=(10, 7))  

plt.title("Dendrograms")  

dend = shc.dendrogram(shc.linkage(reduced_lw, method='ward'))

from sklearn.cluster import KMeans

sse = {}

for k in range(1, 15):

    kmeans = KMeans(n_clusters=k).fit(reduced_lw)

    #reduced_cdm["clusters"] = kmeans.labels_

    #print(data["clusters"])

    sse[k] = kmeans.inertia_ # Inertia: Sum of distances of samples to their closest cluster center

plt.figure()

plt.plot(list(sse.keys()), list(sse.values()))

plt.xlabel("Number of cluster")

plt.ylabel("SSE")

plt.show()

from sklearn.cluster import KMeans
# specify the number of clusters

kmeans = KMeans(n_clusters=4,random_state=2)

# fit the input data

kmeans = kmeans.fit(reduced_lw)

# get the cluster labels

labels = kmeans.predict(reduced_lw)

# centroid values

centroid = kmeans.cluster_centers_

# cluster values

clusters = kmeans.labels_.tolist()

reduced_lw['cluster'] = clusters

reduced_lw['name'] = lw_attacking['Player']

reduced_lw.columns = ['PC1','PC2','PC3','PC4','PC5','Basic_Cluster','Name']

reduced_lw

lw_attacking['Basic_Cluster']=clusters

lw_attacking_search=lw_attacking.sort_values('Basic_Cluster')

import matplotlib as mpl 
import matplotlib.pyplot as plt 
import matplotlib.gridspec as gridspec 
import matplotlib.patheffects as path_effects

#Selecting Team
title_font = "Alegreya Sans"
body_font = "Open Sans"
text_color = "w"
background = "#313332"
filler = "grey"
primary = "red"


fig, ax = plt.subplots(figsize=(15,15))
fig.set_facecolor(background)
ax.patch.set_facecolor(background)

x = reduced_lw.PC1
y = reduced_lw.PC2
txt = reduced_lw.Name
c=reduced_lw.Basic_Cluster
scatter=ax.scatter(x,y,s=120,c=c,cmap='Spectral')

legend1 = ax.legend(*scatter.legend_elements(),
                    loc="upper right", title="Classes")
ax.add_artist(legend1)


ax.annotate
fig.text(0.15,0.91,"Goalkeeping Basic Stats",fontweight="bold",fontsize=22, fontfamily=title_font,color=text_color)

fig.text(0.15,0.89,"Top 5 European Leagues",fontweight="regular", fontsize=18,fontfamily=title_font, color=text_color)

for i, txt in enumerate(txt):
    ax.annotate(txt, (x[i], y[i]),color=text_color)

ax.set_xlabel("PC1", fontfamily=title_font, fontweight="bold", fontsize=12, color=text_color)
ax.set_ylabel("PC2", fontfamily=title_font, fontweight="bold", fontsize= 12, color=text_color)

plt.show()

lw_attacking_visual=lw_attacking_search.sort_values('Basic_Cluster')
lw_attacking_visual[lw_attacking_visual['Basic_Cluster']==1]

avg_lw=lw_attacking_visual[lw_attacking_visual['Basic_Cluster']==0].mean(axis=0)

avg_lw=pd.DataFrame(avg_lw)

lw_attacking_visual['Basic_Cluster']= lw_attacking_visual['Basic_Cluster'].astype(str)

cols=lw_attacking_visual.select_dtypes([np.number]).columns

lw_attacking_visual['Basic_Cluster']= lw_attacking_visual['Basic_Cluster'].astype(int)

avg_lw['Basic_Cluster 0']=lw_attacking_visual[lw_attacking_visual['Basic_Cluster']==0].mean(axis=0)

avg_lw['Basic_Cluster 1']=lw_attacking_visual[lw_attacking_visual['Basic_Cluster']==1].mean(axis=0)

avg_lw['Basic_Cluster 2']=lw_attacking_visual[lw_attacking_visual['Basic_Cluster']==2].mean(axis=0)

avg_lw['Basic_Cluster 3']=lw_attacking_visual[lw_attacking_visual['Basic_Cluster']==3].mean(axis=0)

#avg_lw['Basic_Cluster 4']=lw_attacking_visual[lw_attacking_visual['Basic_Cluster']==4].mean(axis=0)

avg_lw.drop(0,axis=1,inplace=True)

avg_lw=avg_lw.drop('Basic_Cluster',axis=0)

avg_lw

heat=lw_attacking_visual[lw_attacking_visual['Basic_Cluster']==0].mean(axis=0)

heat=pd.DataFrame(heat)

lw_attacking_visual['Basic_Cluster']= lw_attacking_visual['Basic_Cluster'].astype(str)

cols=lw_attacking_visual.select_dtypes([np.number]).columns

lw_attacking_visual[cols]=(lw_attacking_visual[cols]-lw_attacking_visual[cols].min())/(lw_attacking_visual[cols].max()-lw_attacking_visual[cols].min())

lw_attacking_visual['Basic_Cluster']= lw_attacking_visual['Basic_Cluster'].astype(int)

heat['Cluster 0']=lw_attacking_visual[lw_attacking_visual['Basic_Cluster']==0].mean(axis=0)

heat['Cluster 1']=lw_attacking_visual[lw_attacking_visual['Basic_Cluster']==1].mean(axis=0)

heat['Cluster 2']=lw_attacking_visual[lw_attacking_visual['Basic_Cluster']==2].mean(axis=0)

heat['Cluster 3']=lw_attacking_visual[lw_attacking_visual['Basic_Cluster']==3].mean(axis=0)

#heat['Cluster 4']=lw_attacking_visual[lw_attacking_visual['Basic_Cluster']==4].mean(axis=0)

heat.drop(0,axis=1,inplace=True)

heat=heat.drop('Basic_Cluster',axis=0)

lw_attacking_visual['Age']=lw_attacking_visual['Age'].astype(float)

lw_attacking_visual['Age']=lw_attacking_visual['Age'].astype(int)

lw_attacking_search['Age']=lw_attacking_search['Age'].astype(float)

lw_attacking_search['Age']=lw_attacking_search['Age'].astype(int)

lw_attacking_search['Value_Num']=lw_attacking_search['Value_Num'].astype(float)

lw_attacking_search['Value_Num']=lw_attacking_search['Value_Num'].astype(int)

#heat=heat.drop('Age',axis=0)

heat

sns.heatmap(heat, cmap="BuGn")

def club_lw_attacking(TeamName):
  return lw_attacking_search[lw_attacking_search['Squad'] == TeamName][['Player','Pos','Squad','Value','Value_Num','SoT%','Sh/90','SoT/90','G/Sh','G/SoT','npxG/Sh','SCA90','GCA90','Gls/90','xG/90','npxG/90','G-xG/90','np:G-xG/90','Basic_Cluster']]

TeamName= input('Enter your team name : ')
club_lw_attacking(TeamName)

def Replacement_lw_attacking(Player, age, value):
  
  Basic_Cluster_number=int(lw_attacking_search[lw_attacking_search['Player']==Player]['Basic_Cluster'])
  
  if Basic_Cluster_number==0:
  
    search_df= lw_attacking_search.query('Basic_Cluster == 0 or Basic_Cluster == 2 and Age <= @age and Value_Num <= @value' )
  
  elif Basic_Cluster_number==1:
  
    search_df= lw_attacking_search.query('Basic_Cluster == 0 or Basic_Cluster == 2 and Age <= @age and Value_Num <= @value' )
    
  elif Basic_Cluster_number==2:
  
    search_df= lw_attacking_search.query('Basic_Cluster == 0 or Basic_Cluster == 2 and Age <= @age and Value_Num <= @value' )
  
  elif Basic_Cluster_number==3:
    search_df= lw_attacking_search.query('Basic_Cluster == 3 or Basic_Cluster == 0 and Age <= @age and Value_Num <= @value' )
  
  return search_df

Player=input('Enter player to be replaced :')

Age=int(input('Enter the age of the player you want to buy:'))

Value=int(input('Enter the budget for the player you want to buy :'))

result_attacking_lw=Replacement_lw_attacking(Player,Age,Value)

result_attacking_lw.sort_values('Basic_Cluster',ascending=False)

result_attacking_lw

"""# **LW PASSING**"""

passing_data=pd.read_excel("https://github.com/TazeemKhan9/Football-Player-Replacement/blob/main/Original%20Data/Basic%20Passing.xlsx?raw=true")

passing_data

passing_data['Player'] =passing_data['Player'].str.split('\\', expand=True)[0]

passing_data["Age"] = passing_data["Age"].astype(str)

passing_data["Value_Num"] = passing_data["Value_Num"].astype(str)

passing_data['Short.Att%']=(passing_data['Short.Att']/passing_data['Total.Att'])*100

passing_data['Medium.Att%']=(passing_data['Medium.Att']/passing_data['Total.Att'])*100

passing_data['Long.Att%']=(passing_data['Long.Att']/passing_data['Total.Att'])*100

passing_data['Progressive%']=(passing_data['Prog']/passing_data['Total.Att'])*100

passing_data=passing_data.drop(['Rk','Born','Total.Cmp','Short.Cmp','Medium.Cmp','Long.Cmp','Short.Att','Medium.Att','Long.Att','Prog','1/3rd','A-xA'],axis=1)

passing_data=passing_data[passing_data['90s'] >=10]

passing_data=passing_data.drop('90s',axis=1)

lw_passing = passing_data[passing_data['Pos']=='LW']

lw_passing =lw_passing.dropna() 

lw_passing.reset_index(drop=True,inplace=True)

lw_passing

from sklearn import preprocessing

scaler = preprocessing.MinMaxScaler()

cols=lw_passing.select_dtypes([np.number]).columns

x=lw_passing[cols]

x=x.fillna(0)

x_scaled = scaler.fit_transform(x)

X= pd.DataFrame(x_scaled)

from sklearn.decomposition import PCA

pca=PCA()

reduced_lw_passing=pd.DataFrame(pca.fit_transform(X))

var=pca.explained_variance_ratio_.cumsum()

var

from sklearn.decomposition import PCA

pca = PCA(n_components = 7) # 2D PCA for the plot

reduced_lw_passing = pd.DataFrame(pca.fit_transform(X))

reduced_lw_passing

plt.figure(figsize=(10, 7))  
plt.title("Dendrograms")  
dend = shc.dendrogram(shc.linkage(reduced_lw_passing, method='ward'))

Sum_of_squared_distances = []
K = range(1,15)
for k in K:
    km = KMeans(n_clusters=k)
    km = km.fit(reduced_lw_passing)
    Sum_of_squared_distances.append(km.inertia_)
plt.plot(K, Sum_of_squared_distances, 'bx-')
plt.xlabel('k')
plt.ylabel('Sum_of_squared_distances')
plt.title('Elbow Method For Optimal k')
plt.show()

from sklearn.cluster import KMeans

# specify the number of clusters

kmeans = KMeans(n_clusters=3,random_state=2)

# fit the input data

kmeans = kmeans.fit(reduced_lw_passing)

# get the cluster labels

labels = kmeans.predict(reduced_lw_passing)

# centroid values

centroid = kmeans.cluster_centers_

#cluster values

advance_clusters = kmeans.labels_.tolist()

reduced_lw_passing['Advance_Cluster'] = advance_clusters

reduced_lw_passing['name'] = lw_passing['Player']

reduced_lw_passing.columns = ['PC1','PC2','PC3','PC4','PC5','PC6','PC7','Advance_Cluster', 'Name']

reduced_lw_passing

lw_passing['Advance_Cluster']=advance_clusters

lw_passing_search=lw_passing.sort_values('Advance_Cluster')

import matplotlib as mpl 
import matplotlib.pyplot as plt 
import matplotlib.gridspec as gridspec 
import matplotlib.patheffects as path_effects

#Selecting Team
title_font = "Alegreya Sans"
body_font = "Open Sans"
text_color = "w"
background = "#313332"
filler = "grey"
primary = "red"


fig, ax = plt.subplots(figsize=(20,20))
fig.set_facecolor(background)
ax.patch.set_facecolor(background)

x = reduced_lw_passing.PC1
y = reduced_lw_passing.PC2
txt = reduced_lw_passing.Name
scatter=ax.scatter(x,y,s=120,c=advance_clusters,cmap='Spectral')

legend1 = ax.legend(*scatter.legend_elements(),
                    loc="upper right", title="Classes")
ax.add_artist(legend1)


ax.annotate
fig.text(0.15,0.91,"Goalkeeping Basic Stats",fontweight="bold",fontsize=22, fontfamily=title_font,color=text_color)

fig.text(0.15,0.89,"Top 5 European Leagues",fontweight="regular", fontsize=18,fontfamily=title_font, color=text_color)

for i, txt in enumerate(txt):
    ax.annotate(txt, (x[i], y[i]),color=text_color)

ax.set_xlabel("PC1", fontfamily=title_font, fontweight="bold", fontsize=12, color=text_color)
ax.set_ylabel("PC2", fontfamily=title_font, fontweight="bold", fontsize= 12, color=text_color)

plt.show()

lw_passing_visual=lw_passing_search.sort_values('Advance_Cluster')
lw_passing_visual[lw_passing_visual['Advance_Cluster']==0]

avg_lw_passing=lw_passing_visual[lw_passing_visual['Advance_Cluster']==0].mean(axis=0)

avg_lw_passing=pd.DataFrame(avg_lw_passing)

lw_passing_visual['Advance_Cluster']= lw_passing_visual['Advance_Cluster'].astype(str)

cols=lw_passing_visual.select_dtypes([np.number]).columns

lw_passing_visual['Advance_Cluster']= lw_passing_visual['Advance_Cluster'].astype(int)

avg_lw_passing['Advance_Cluster 0']=lw_passing_visual[lw_passing_visual['Advance_Cluster']==0].mean(axis=0)

avg_lw_passing['Advance_Cluster 1']=lw_passing_visual[lw_passing_visual['Advance_Cluster']==1].mean(axis=0)

avg_lw_passing['Advance_Cluster 2']=lw_passing_visual[lw_passing_visual['Advance_Cluster']==2].mean(axis=0)

#avg_lw_passing['Advance_Cluster 3']=lw_passing_visual[lw_passing_visual['Advance_Cluster']==3].mean(axis=0)

avg_lw_passing.drop(0,axis=1,inplace=True)

avg_lw_passing=avg_lw_passing.drop('Advance_Cluster',axis=0)

avg_lw_passing

heat=lw_passing_visual[lw_passing_visual['Advance_Cluster']==0].mean(axis=0)

heat=pd.DataFrame(heat)

lw_passing_visual['Advance_Cluster']= lw_passing_visual['Advance_Cluster'].astype(str)

cols=lw_passing_visual.select_dtypes([np.number]).columns

lw_passing_visual[cols]=(lw_passing_visual[cols]-lw_passing_visual[cols].min())/(lw_passing_visual[cols].max()-lw_passing_visual[cols].min())

lw_passing_visual['Advance_Cluster']= lw_passing_visual['Advance_Cluster'].astype(int)

heat['Advance_Cluster 0']=lw_passing_visual[lw_passing_visual['Advance_Cluster']==0].mean(axis=0)

heat['Advance_Cluster 1']=lw_passing_visual[lw_passing_visual['Advance_Cluster']==1].mean(axis=0)

heat['Advance_Cluster 2']=lw_passing_visual[lw_passing_visual['Advance_Cluster']==2].mean(axis=0)

#heat['Advance_Cluster 3']=lw_passing_visual[lw_passing_visual['Advance_Cluster']==3].mean(axis=0)

lw_passing_visual['Age']=lw_passing_visual['Age'].astype(float)

lw_passing_visual['Age']=lw_passing_visual['Age'].astype(int)

lw_passing_search['Age']=lw_passing_search['Age'].astype(float)

lw_passing_search['Age']=lw_passing_search['Age'].astype(int)

lw_passing_search['Value_Num']=lw_passing_search['Value_Num'].astype(float)

lw_passing_search['Value_Num']=lw_passing_search['Value_Num'].astype(int)

heat=heat.drop(0,axis=1)

heat=heat.drop('Advance_Cluster',axis=0)

heat

sns.heatmap(heat, cmap="BuGn")

def club_lw_passing(TeamName):
  return lw_passing_search[lw_passing_search['Squad'] == TeamName][['Player','Nation','Pos','Squad','Value','Value_Num','Age','Total.Att','Total.Cmp%','Total.TotDist','Total.PrgDist','Short.Cmp%','Medium.Cmp%','Long.Cmp%','Ast','xA','KP','PPA','CrsPA','Short.Att%','Medium.Att%','Long.Att%','Progressive%'	,'Advance_Cluster']]

def Replacement_lw_passing(Player, age, value):
  
  Advance_Cluster_number=int(lw_passing_search[lw_passing_search['Player']==Player]['Advance_Cluster'])
  
  if Advance_Cluster_number==0:
  
    search_df= lw_passing_search.query('Advance_Cluster == 0 and Age <= @age and Value_Num <= @value' )
  
  elif Advance_Cluster_number==1:
  
    search_df= lw_passing_search.query('Advance_Cluster == 1 and Age <= @age and Value_Num <= @value' )
  
  elif Advance_Cluster_number==2:

    search_df= lw_passing_search.query('Advance_Cluster == 1 or Advance_Cluster == 0 and Age <= @age and Value_Num <= @value' )
  
  return search_df

result_passing_lw=Replacement_lw_passing(Player,Age,Value)

result_passing_lw.sort_values('Advance_Cluster',ascending=False)

result_passing_lw

result_passing_lw.drop(['Value','Value_Num','Pos','Squad','Age'],inplace=True,axis=1)

#result_advance['Advance_Cluster']=result_advance['Advance_Cluster'].replace(to_replace =[0,1,2],value =["Ball Playing","Defensive","Mix"])

output_lw = pd.merge(result_passing_lw,result_attacking_lw, how='inner', on='Player')

output_lw

output_lw[['Player','Nation','Pos','Value','Value_Num','Squad','Age','Basic_Cluster','Advance_Cluster']]

"""# **RW SHOOTING**"""

attacking_data=pd.read_excel("https://github.com/TazeemKhan9/Football-Player-Replacement/blob/main/Original%20Data/Shooting%20Data.xlsx?raw=true")

attacking_data

attacking_data["Age"] = attacking_data["Age"].astype(str)

attacking_data["Value_Num"] = attacking_data["Value_Num"].astype(str)

attacking_data['Gls/90']=attacking_data['Gls']/attacking_data['90s']

attacking_data['xG/90']=attacking_data['xG']/attacking_data['90s']

attacking_data['npxG/90']=attacking_data['npxG']/attacking_data['90s']

attacking_data['G-xG/90']=attacking_data['G-xG']/attacking_data['90s']

attacking_data['np:G-xG/90']=attacking_data['np:G-xG']/attacking_data['90s']

attacking_data=attacking_data.drop(['Rk','Nation','Links','Born','Gls','Sh','SoT','FK','PK','PKatt','np:G-xG','G-xG','npxG','xG','npxG'],axis=1)

attacking_data=attacking_data[attacking_data['90s'] >=10]

rw_attacking=attacking_data[attacking_data['Pos']=='RW']

rw_attacking=rw_attacking.drop('90s',axis=1)

rw_attacking.reset_index(drop=True,inplace=True)

rw_attacking=rw_attacking.dropna() 

rw_attacking

from sklearn import preprocessing

scaler = preprocessing.MinMaxScaler()

cols=rw_attacking.select_dtypes([np.number]).columns

x=rw_attacking[cols]

#x=x.fillna(0)

x_scaled = scaler.fit_transform(x)

X= pd.DataFrame(x_scaled)

X

from sklearn.decomposition import PCA

pca=PCA()

reduced_rw=pd.DataFrame(pca.fit_transform(X))

var=pca.explained_variance_ratio_.cumsum()

var

from sklearn.decomposition import PCA

pca = PCA(n_components = 5) # 2D PCA for the plot

reduced_rw = pd.DataFrame(pca.fit_transform(X))

reduced_rw

plt.figure(figsize=(10, 7))  

plt.title("Dendrograms")  

dend = shc.dendrogram(shc.linkage(reduced_rw, method='ward'))

from sklearn.cluster import KMeans

sse = {}

for k in range(1, 15):

    kmeans = KMeans(n_clusters=k).fit(reduced_rw)

    #reduced_cdm["clusters"] = kmeans.labels_

    #print(data["clusters"])

    sse[k] = kmeans.inertia_ # Inertia: Sum of distances of samples to their closest cluster center

plt.figure()

plt.plot(list(sse.keys()), list(sse.values()))

plt.xlabel("Number of cluster")

plt.ylabel("SSE")

plt.show()

from sklearn.cluster import KMeans
# specify the number of clusters

kmeans = KMeans(n_clusters=4,random_state=2)

# fit the input data

kmeans = kmeans.fit(reduced_rw)

# get the cluster labels

labels = kmeans.predict(reduced_rw)

# centroid values

centroid = kmeans.cluster_centers_

# cluster values

clusters = kmeans.labels_.tolist()

reduced_rw['cluster'] = clusters

reduced_rw['name'] = rw_attacking['Player']

reduced_rw.columns = ['PC1','PC2','PC3','PC4','PC5','Basic_Cluster','Name']

reduced_rw

rw_attacking['Basic_Cluster']=clusters

rw_attacking_search=rw_attacking.sort_values('Basic_Cluster')

import matplotlib as mpl 
import matplotlib.pyplot as plt 
import matplotlib.gridspec as gridspec 
import matplotlib.patheffects as path_effects

#Selecting Team
title_font = "Alegreya Sans"
body_font = "Open Sans"
text_color = "w"
background = "#313332"
filler = "grey"
primary = "red"


fig, ax = plt.subplots(figsize=(15,15))
fig.set_facecolor(background)
ax.patch.set_facecolor(background)

x = reduced_rw.PC1
y = reduced_rw.PC2
txt = reduced_rw.Name
c=reduced_rw.Basic_Cluster
scatter=ax.scatter(x,y,s=120,c=c,cmap='Spectral')

legend1 = ax.legend(*scatter.legend_elements(),
                    loc="upper right", title="Classes")
ax.add_artist(legend1)


ax.annotate
fig.text(0.15,0.91,"Goalkeeping Basic Stats",fontweight="bold",fontsize=22, fontfamily=title_font,color=text_color)

fig.text(0.15,0.89,"Top 5 European Leagues",fontweight="regular", fontsize=18,fontfamily=title_font, color=text_color)

for i, txt in enumerate(txt):
    ax.annotate(txt, (x[i], y[i]),color=text_color)

ax.set_xlabel("PC1", fontfamily=title_font, fontweight="bold", fontsize=12, color=text_color)
ax.set_ylabel("PC2", fontfamily=title_font, fontweight="bold", fontsize= 12, color=text_color)

plt.show()

rw_attacking_visual=rw_attacking_search.sort_values('Basic_Cluster')
rw_attacking_visual[rw_attacking_visual['Basic_Cluster']==1]

avg_rw=rw_attacking_visual[rw_attacking_visual['Basic_Cluster']==0].mean(axis=0)

avg_rw=pd.DataFrame(avg_rw)

rw_attacking_visual['Basic_Cluster']= rw_attacking_visual['Basic_Cluster'].astype(str)

cols=rw_attacking_visual.select_dtypes([np.number]).columns

rw_attacking_visual['Basic_Cluster']= rw_attacking_visual['Basic_Cluster'].astype(int)

avg_rw['Basic_Cluster 0']=rw_attacking_visual[rw_attacking_visual['Basic_Cluster']==0].mean(axis=0)

avg_rw['Basic_Cluster 1']=rw_attacking_visual[rw_attacking_visual['Basic_Cluster']==1].mean(axis=0)

avg_rw['Basic_Cluster 2']=rw_attacking_visual[rw_attacking_visual['Basic_Cluster']==2].mean(axis=0)

avg_rw['Basic_Cluster 3']=rw_attacking_visual[rw_attacking_visual['Basic_Cluster']==3].mean(axis=0)

#avg_rw['Basic_Cluster 4']=rw_attacking_visual[rw_attacking_visual['Basic_Cluster']==4].mean(axis=0)

avg_rw.drop(0,axis=1,inplace=True)

avg_rw=avg_rw.drop('Basic_Cluster',axis=0)

avg_rw

heat=rw_attacking_visual[rw_attacking_visual['Basic_Cluster']==0].mean(axis=0)

heat=pd.DataFrame(heat)

rw_attacking_visual['Basic_Cluster']= rw_attacking_visual['Basic_Cluster'].astype(str)

cols=rw_attacking_visual.select_dtypes([np.number]).columns

rw_attacking_visual[cols]=(rw_attacking_visual[cols]-rw_attacking_visual[cols].min())/(rw_attacking_visual[cols].max()-rw_attacking_visual[cols].min())

rw_attacking_visual['Basic_Cluster']= rw_attacking_visual['Basic_Cluster'].astype(int)

heat['Cluster 0']=rw_attacking_visual[rw_attacking_visual['Basic_Cluster']==0].mean(axis=0)

heat['Cluster 1']=rw_attacking_visual[rw_attacking_visual['Basic_Cluster']==1].mean(axis=0)

heat['Cluster 2']=rw_attacking_visual[rw_attacking_visual['Basic_Cluster']==2].mean(axis=0)

heat['Cluster 3']=rw_attacking_visual[rw_attacking_visual['Basic_Cluster']==3].mean(axis=0)

#heat['Cluster 4']=rw_attacking_visual[rw_attacking_visual['Basic_Cluster']==4].mean(axis=0)

heat.drop(0,axis=1,inplace=True)

heat=heat.drop('Basic_Cluster',axis=0)

rw_attacking_visual['Age']=rw_attacking_visual['Age'].astype(float)

rw_attacking_visual['Age']=rw_attacking_visual['Age'].astype(int)

rw_attacking_search['Age']=rw_attacking_search['Age'].astype(float)

rw_attacking_search['Age']=rw_attacking_search['Age'].astype(int)

rw_attacking_search['Value_Num']=rw_attacking_search['Value_Num'].astype(float)

rw_attacking_search['Value_Num']=rw_attacking_search['Value_Num'].astype(int)

#heat=heat.drop('Age',axis=0)

heat

sns.heatmap(heat, cmap="BuGn")

def club_rw_attacking(TeamName):
  return rw_attacking_search[rw_attacking_search['Squad'] == TeamName][['Player','Pos','Squad','Value','Value_Num','SoT%','Sh/90','SoT/90','G/Sh','G/SoT','npxG/Sh','SCA90','GCA90','Gls/90','xG/90','npxG/90','G-xG/90','np:G-xG/90','Basic_Cluster']]

TeamName= input('Enter your team name : ')
club_rw_attacking(TeamName)

def Replacement_rw_attacking(Player, age, value):
  
  Basic_Cluster_number=int(rw_attacking_search[rw_attacking_search['Player']==Player]['Basic_Cluster'])
  
  if Basic_Cluster_number==0:
  
    search_df= rw_attacking_search.query('Basic_Cluster == 0 or Basic_Cluster == 2 and Age <= @age and Value_Num <= @value' )
  
  elif Basic_Cluster_number==1:
  
    search_df= rw_attacking_search.query('Basic_Cluster == 0 or Basic_Cluster == 2 and Age <= @age and Value_Num <= @value' )
    
  elif Basic_Cluster_number==2:
  
    search_df= rw_attacking_search.query('Basic_Cluster == 0 or Basic_Cluster == 2 and Age <= @age and Value_Num <= @value' )
  
  elif Basic_Cluster_number==3:
    search_df= rw_attacking_search.query('Basic_Cluster == 1 or Basic_Cluster == 0 and Age <= @age and Value_Num <= @value' )
  
  return search_df

Player=input('Enter player to be replaced :')

Age=int(input('Enter the age of the player you want to buy:'))

Value=int(input('Enter the budget for the player you want to buy :'))

result_attacking_rw=Replacement_rw_attacking(Player,Age,Value)

result_attacking_rw.sort_values('Basic_Cluster',ascending=False)

result_attacking_rw

"""# **RW PASSING**"""

passing_data=pd.read_excel("https://github.com/TazeemKhan9/Football-Player-Replacement/blob/main/Original%20Data/Basic%20Passing.xlsx?raw=true")

passing_data

passing_data['Player'] =passing_data['Player'].str.split('\\', expand=True)[0]

passing_data["Age"] = passing_data["Age"].astype(str)

passing_data["Value_Num"] = passing_data["Value_Num"].astype(str)

passing_data['Short.Att%']=(passing_data['Short.Att']/passing_data['Total.Att'])*100

passing_data['Medium.Att%']=(passing_data['Medium.Att']/passing_data['Total.Att'])*100

passing_data['Long.Att%']=(passing_data['Long.Att']/passing_data['Total.Att'])*100

passing_data['Progressive%']=(passing_data['Prog']/passing_data['Total.Att'])*100

passing_data=passing_data.drop(['Rk','Born','Total.Cmp','Short.Cmp','Medium.Cmp','Long.Cmp','Short.Att','Medium.Att','Long.Att','Prog','1/3rd','A-xA'],axis=1)

passing_data=passing_data[passing_data['90s'] >=10]

passing_data=passing_data.drop('90s',axis=1)

rw_passing = passing_data[passing_data['Pos']=='RW']

rw_passing =rw_passing.dropna() 

rw_passing.reset_index(drop=True,inplace=True)

rw_passing

from sklearn import preprocessing

scaler = preprocessing.MinMaxScaler()

cols=rw_passing.select_dtypes([np.number]).columns

x=rw_passing[cols]

x=x.fillna(0)

x_scaled = scaler.fit_transform(x)

X= pd.DataFrame(x_scaled)

from sklearn.decomposition import PCA

pca=PCA()

reduced_rw_passing=pd.DataFrame(pca.fit_transform(X))

var=pca.explained_variance_ratio_.cumsum()

var

from sklearn.decomposition import PCA

pca = PCA(n_components = 7) # 2D PCA for the plot

reduced_rw_passing = pd.DataFrame(pca.fit_transform(X))

reduced_rw_passing

plt.figure(figsize=(10, 7))  
plt.title("Dendrograms")  
dend = shc.dendrogram(shc.linkage(reduced_rw_passing, method='ward'))

Sum_of_squared_distances = []
K = range(1,15)
for k in K:
    km = KMeans(n_clusters=k)
    km = km.fit(reduced_rw_passing)
    Sum_of_squared_distances.append(km.inertia_)
plt.plot(K, Sum_of_squared_distances, 'bx-')
plt.xlabel('k')
plt.ylabel('Sum_of_squared_distances')
plt.title('Elbow Method For Optimal k')
plt.show()

from sklearn.cluster import KMeans

# specify the number of clusters

kmeans = KMeans(n_clusters=3,random_state=2)

# fit the input data

kmeans = kmeans.fit(reduced_rw_passing)

# get the cluster labels

labels = kmeans.predict(reduced_rw_passing)

# centroid values

centroid = kmeans.cluster_centers_

#cluster values

advance_clusters = kmeans.labels_.tolist()

reduced_rw_passing['Advance_Cluster'] = advance_clusters

reduced_rw_passing['name'] = rw_passing['Player']

reduced_rw_passing.columns = ['PC1','PC2','PC3','PC4','PC5','PC6','PC7','Advance_Cluster', 'Name']

reduced_rw_passing

rw_passing['Advance_Cluster']=advance_clusters

rw_passing_search=rw_passing.sort_values('Advance_Cluster')

import matplotlib as mpl 
import matplotlib.pyplot as plt 
import matplotlib.gridspec as gridspec 
import matplotlib.patheffects as path_effects

#Selecting Team
title_font = "Alegreya Sans"
body_font = "Open Sans"
text_color = "w"
background = "#313332"
filler = "grey"
primary = "red"


fig, ax = plt.subplots(figsize=(20,20))
fig.set_facecolor(background)
ax.patch.set_facecolor(background)

x = reduced_rw_passing.PC1
y = reduced_rw_passing.PC2
txt = reduced_rw_passing.Name
scatter=ax.scatter(x,y,s=120,c=advance_clusters,cmap='Spectral')

legend1 = ax.legend(*scatter.legend_elements(),
                    loc="upper right", title="Classes")
ax.add_artist(legend1)


ax.annotate
fig.text(0.15,0.91,"RW Passing Stats",fontweight="bold",fontsize=22, fontfamily=title_font,color=text_color)

fig.text(0.15,0.89,"Top 5 European Leagues",fontweight="regular", fontsize=18,fontfamily=title_font, color=text_color)

for i, txt in enumerate(txt):
    ax.annotate(txt, (x[i], y[i]),color=text_color)

ax.set_xlabel("PC1", fontfamily=title_font, fontweight="bold", fontsize=12, color=text_color)
ax.set_ylabel("PC2", fontfamily=title_font, fontweight="bold", fontsize= 12, color=text_color)

plt.show()

rw_passing_visual=rw_passing_search.sort_values('Advance_Cluster')
rw_passing_visual[rw_passing_visual['Advance_Cluster']==0]

avg_rw_passing=rw_passing_visual[rw_passing_visual['Advance_Cluster']==0].mean(axis=0)

avg_rw_passing=pd.DataFrame(avg_rw_passing)

rw_passing_visual['Advance_Cluster']= rw_passing_visual['Advance_Cluster'].astype(str)

cols=rw_passing_visual.select_dtypes([np.number]).columns

rw_passing_visual['Advance_Cluster']= rw_passing_visual['Advance_Cluster'].astype(int)

avg_rw_passing['Advance_Cluster 0']=rw_passing_visual[rw_passing_visual['Advance_Cluster']==0].mean(axis=0)

avg_rw_passing['Advance_Cluster 1']=rw_passing_visual[rw_passing_visual['Advance_Cluster']==1].mean(axis=0)

avg_rw_passing['Advance_Cluster 2']=rw_passing_visual[rw_passing_visual['Advance_Cluster']==2].mean(axis=0)

#avg_rw_passing['Advance_Cluster 3']=rw_passing_visual[rw_passing_visual['Advance_Cluster']==3].mean(axis=0)

avg_rw_passing.drop(0,axis=1,inplace=True)

avg_rw_passing=avg_rw_passing.drop('Advance_Cluster',axis=0)

avg_rw_passing

heat=rw_passing_visual[rw_passing_visual['Advance_Cluster']==0].mean(axis=0)

heat=pd.DataFrame(heat)

rw_passing_visual['Advance_Cluster']= rw_passing_visual['Advance_Cluster'].astype(str)

cols=rw_passing_visual.select_dtypes([np.number]).columns

rw_passing_visual[cols]=(rw_passing_visual[cols]-rw_passing_visual[cols].min())/(rw_passing_visual[cols].max()-rw_passing_visual[cols].min())

rw_passing_visual['Advance_Cluster']= rw_passing_visual['Advance_Cluster'].astype(int)

heat['Advance_Cluster 0']=rw_passing_visual[rw_passing_visual['Advance_Cluster']==0].mean(axis=0)

heat['Advance_Cluster 1']=rw_passing_visual[rw_passing_visual['Advance_Cluster']==1].mean(axis=0)

heat['Advance_Cluster 2']=rw_passing_visual[rw_passing_visual['Advance_Cluster']==2].mean(axis=0)

#heat['Advance_Cluster 3']=rw_passing_visual[rw_passing_visual['Advance_Cluster']==3].mean(axis=0)

rw_passing_visual['Age']=rw_passing_visual['Age'].astype(float)

rw_passing_visual['Age']=rw_passing_visual['Age'].astype(int)

rw_passing_search['Age']=rw_passing_search['Age'].astype(float)

rw_passing_search['Age']=rw_passing_search['Age'].astype(int)

rw_passing_search['Value_Num']=rw_passing_search['Value_Num'].astype(float)

rw_passing_search['Value_Num']=rw_passing_search['Value_Num'].astype(int)

heat=heat.drop(0,axis=1)

heat=heat.drop('Advance_Cluster',axis=0)

heat

sns.heatmap(heat, cmap="BuGn")

def club_rw_passing(TeamName):
  return rw_passing_search[lw_passing_search['Squad'] == TeamName][['Player','Nation','Pos','Squad','Value','Value_Num','Age','Total.Att','Total.Cmp%','Total.TotDist','Total.PrgDist','Short.Cmp%','Medium.Cmp%','Long.Cmp%','Ast','xA','KP','PPA','CrsPA','Short.Att%','Medium.Att%','Long.Att%','Progressive%'	,'Advance_Cluster']]

def Replacement_rw_passing(Player, age, value):
  
  Advance_Cluster_number=int(rw_passing_search[rw_passing_search['Player']==Player]['Advance_Cluster'])
  
  if Advance_Cluster_number==0:
  
    search_df= rw_passing_search.query('Advance_Cluster == 0 or Advance_Cluster == 1 and Age <= @age and Value_Num <= @value' )
  
  elif Advance_Cluster_number==1:
  
    search_df= rw_passing_search.query('Advance_Cluster == 1 or Advance_Cluster == 0 and Age <= @age and Value_Num <= @value' )
  
  elif Advance_Cluster_number==2:

    search_df= rw_passing_search.query('Advance_Cluster == 2 or Advance_Cluster == 0 and Age <= @age and Value_Num <= @value' )
  
  return search_df

result_passing_rw=Replacement_rw_passing(Player,Age,Value)

result_passing_rw.sort_values('Advance_Cluster',ascending=False)

result_passing_rw

result_passing_rw.drop(['Value','Value_Num','Pos','Squad','Age'],inplace=True,axis=1)

#result_advance['Advance_Cluster']=result_advance['Advance_Cluster'].replace(to_replace =[0,1,2],value =["Ball Playing","Defensive","Mix"])

output_rw = pd.merge(result_passing_rw,result_attacking_rw, how='inner', on='Player')

output_rw

output_rw[['Player','Nation','Pos','Value','Value_Num','Squad','Age','Basic_Cluster','Advance_Cluster']]

"""# **CF SHOOTING**"""

attacking_data=pd.read_excel("https://github.com/TazeemKhan9/Football-Player-Replacement/blob/main/Original%20Data/Shooting%20Data.xlsx?raw=true")

attacking_data

attacking_data["Age"] = attacking_data["Age"].astype(str)

attacking_data["Value_Num"] = attacking_data["Value_Num"].astype(str)

attacking_data['Gls/90']=attacking_data['Gls']/attacking_data['90s']

attacking_data['xG/90']=attacking_data['xG']/attacking_data['90s']

attacking_data['npxG/90']=attacking_data['npxG']/attacking_data['90s']

attacking_data['G-xG/90']=attacking_data['G-xG']/attacking_data['90s']

attacking_data['np:G-xG/90']=attacking_data['np:G-xG']/attacking_data['90s']

attacking_data=attacking_data.drop(['Rk','Nation','Links','Born','Gls','Sh','SoT','FK','PK','PKatt','np:G-xG','G-xG','npxG','xG','npxG'],axis=1)

attacking_data=attacking_data[attacking_data['90s'] >=10]

cf_attacking=attacking_data[attacking_data['Pos']=='CF']

cf_attacking=cf_attacking.drop('90s',axis=1)

cf_attacking.reset_index(drop=True,inplace=True)

cf_attacking=cf_attacking.dropna() 

cf_attacking

from sklearn import preprocessing

scaler = preprocessing.MinMaxScaler()

cols=cf_attacking.select_dtypes([np.number]).columns

x=cf_attacking[cols]

#x=x.fillna(0)

x_scaled = scaler.fit_transform(x)

X= pd.DataFrame(x_scaled)

X

from sklearn.decomposition import PCA

pca=PCA()

reduced_cf=pd.DataFrame(pca.fit_transform(X))

var=pca.explained_variance_ratio_.cumsum()

var

from sklearn.decomposition import PCA

pca = PCA(n_components = 5) # 2D PCA for the plot

reduced_cf = pd.DataFrame(pca.fit_transform(X))

reduced_cf

plt.figure(figsize=(10, 7))  

plt.title("Dendrograms")  

dend = shc.dendrogram(shc.linkage(reduced_cf, method='ward'))

from sklearn.cluster import KMeans

sse = {}

for k in range(1, 15):

    kmeans = KMeans(n_clusters=k).fit(reduced_cf)

    #reduced_cdm["clusters"] = kmeans.labels_

    #print(data["clusters"])

    sse[k] = kmeans.inertia_ # Inertia: Sum of distances of samples to their closest cluster center

plt.figure()

plt.plot(list(sse.keys()), list(sse.values()))

plt.xlabel("Number of cluster")

plt.ylabel("SSE")

plt.show()

from sklearn.cluster import KMeans
# specify the number of clusters

kmeans = KMeans(n_clusters=4,random_state=2)

# fit the input data

kmeans = kmeans.fit(reduced_cf)

# get the cluster labels

labels = kmeans.predict(reduced_cf)

# centroid values

centroid = kmeans.cluster_centers_

# cluster values

clusters = kmeans.labels_.tolist()

reduced_cf['cluster'] = clusters

reduced_cf['name'] = cf_attacking['Player']

reduced_cf.columns = ['PC1','PC2','PC3','PC4','PC5','Basic_Cluster','Name']

reduced_cf

cf_attacking['Basic_Cluster']=clusters

cf_attacking_search=cf_attacking.sort_values('Basic_Cluster')

import matplotlib as mpl 
import matplotlib.pyplot as plt 
import matplotlib.gridspec as gridspec 
import matplotlib.patheffects as path_effects

#Selecting Team
title_font = "Alegreya Sans"
body_font = "Open Sans"
text_color = "w"
background = "#313332"
filler = "grey"
primary = "red"


fig, ax = plt.subplots(figsize=(15,15))
fig.set_facecolor(background)
ax.patch.set_facecolor(background)

x = reduced_cf.PC1
y = reduced_cf.PC2
txt = reduced_cf.Name
c=reduced_cf.Basic_Cluster
scatter=ax.scatter(x,y,s=120,c=c,cmap='Spectral')

legend1 = ax.legend(*scatter.legend_elements(),
                    loc="upper right", title="Classes")
ax.add_artist(legend1)


ax.annotate
fig.text(0.15,0.91,"Goalkeeping Basic Stats",fontweight="bold",fontsize=22, fontfamily=title_font,color=text_color)

fig.text(0.15,0.89,"Top 5 European Leagues",fontweight="regular", fontsize=18,fontfamily=title_font, color=text_color)

for i, txt in enumerate(txt):
    ax.annotate(txt, (x[i], y[i]),color=text_color)

ax.set_xlabel("PC1", fontfamily=title_font, fontweight="bold", fontsize=12, color=text_color)
ax.set_ylabel("PC2", fontfamily=title_font, fontweight="bold", fontsize= 12, color=text_color)

plt.show()

cf_attacking_visual=cf_attacking_search.sort_values('Basic_Cluster')
cf_attacking_visual[cf_attacking_visual['Basic_Cluster']==0]

avg_cf=cf_attacking_visual[cf_attacking_visual['Basic_Cluster']==0].mean(axis=0)

avg_cf=pd.DataFrame(avg_cf)

cf_attacking_visual['Basic_Cluster']= cf_attacking_visual['Basic_Cluster'].astype(str)

cols=cf_attacking_visual.select_dtypes([np.number]).columns

cf_attacking_visual['Basic_Cluster']= cf_attacking_visual['Basic_Cluster'].astype(int)

avg_cf['Basic_Cluster 0']=cf_attacking_visual[cf_attacking_visual['Basic_Cluster']==0].mean(axis=0)

avg_cf['Basic_Cluster 1']=cf_attacking_visual[cf_attacking_visual['Basic_Cluster']==1].mean(axis=0)

avg_cf['Basic_Cluster 2']=cf_attacking_visual[cf_attacking_visual['Basic_Cluster']==2].mean(axis=0)

avg_cf['Basic_Cluster 3']=cf_attacking_visual[cf_attacking_visual['Basic_Cluster']==3].mean(axis=0)

#avg_cf['Basic_Cluster 4']=cf_attacking_visual[cf_attacking_visual['Basic_Cluster']==4].mean(axis=0)

avg_cf.drop(0,axis=1,inplace=True)

avg_cf=avg_cf.drop('Basic_Cluster',axis=0)

avg_cf

heat=cf_attacking_visual[cf_attacking_visual['Basic_Cluster']==0].mean(axis=0)

heat=pd.DataFrame(heat)

cf_attacking_visual['Basic_Cluster']= cf_attacking_visual['Basic_Cluster'].astype(str)

cols=cf_attacking_visual.select_dtypes([np.number]).columns

cf_attacking_visual[cols]=(cf_attacking_visual[cols]-cf_attacking_visual[cols].min())/(cf_attacking_visual[cols].max()-cf_attacking_visual[cols].min())

cf_attacking_visual['Basic_Cluster']= cf_attacking_visual['Basic_Cluster'].astype(int)

heat['Cluster 0']=cf_attacking_visual[cf_attacking_visual['Basic_Cluster']==0].mean(axis=0)

heat['Cluster 1']=cf_attacking_visual[cf_attacking_visual['Basic_Cluster']==1].mean(axis=0)

heat['Cluster 2']=cf_attacking_visual[cf_attacking_visual['Basic_Cluster']==2].mean(axis=0)

heat['Cluster 3']=cf_attacking_visual[cf_attacking_visual['Basic_Cluster']==3].mean(axis=0)

#heat['Cluster 4']=cf_attacking_visual[cf_attacking_visual['Basic_Cluster']==4].mean(axis=0)

heat.drop(0,axis=1,inplace=True)

heat=heat.drop('Basic_Cluster',axis=0)

cf_attacking_visual['Age']=cf_attacking_visual['Age'].astype(float)

cf_attacking_visual['Age']=cf_attacking_visual['Age'].astype(int)

cf_attacking_search['Age']=cf_attacking_search['Age'].astype(float)

cf_attacking_search['Age']=cf_attacking_search['Age'].astype(int)

cf_attacking_search['Value_Num']=cf_attacking_search['Value_Num'].astype(float)

cf_attacking_search = cf_attacking_search.dropna() 

cf_attacking_search['Value_Num']=cf_attacking_search['Value_Num'].astype(int)

heat

sns.heatmap(heat, cmap="BuGn")

def club_cf_attacking(TeamName):
  return cf_attacking_search[cf_attacking_search['Squad'] == TeamName][['Player','Pos','Squad','Value','Value_Num','SoT%','Sh/90','SoT/90','G/Sh','G/SoT','npxG/Sh','SCA90','GCA90','Gls/90','xG/90','npxG/90','G-xG/90','np:G-xG/90','Basic_Cluster']]

TeamName= input('Enter your team name : ')
club_cf_attacking(TeamName)

def Replacement_cf_attacking(Player, age, value):
  
  Basic_Cluster_number=int(cf_attacking_search[cf_attacking_search['Player']==Player]['Basic_Cluster'])
  
  if Basic_Cluster_number==0:
  
    search_df= cf_attacking_search.query('Basic_Cluster == 0 or Basic_Cluster == 2 and Age <= @age and Value_Num <= @value' )
  
  elif Basic_Cluster_number==1:
  
    search_df= cf_attacking_search.query('Basic_Cluster == 1 or Basic_Cluster == 0 or Basic_Cluster == 2 and Age <= @age and Value_Num <= @value' )
    
  elif Basic_Cluster_number==2:
  
    search_df= cf_attacking_search.query('Basic_Cluster == 0 or Basic_Cluster == 2 and Age <= @age and Value_Num <= @value' )
  
  elif Basic_Cluster_number==3:
    search_df= cf_attacking_search.query('Basic_Cluster == 0 or Basic_Cluster == 1 and Age <= @age and Value_Num <= @value' )
  
  return search_df

Player=input('Enter player to be replaced :')

Age=int(input('Enter the age of the player you want to buy:'))

Value=int(input('Enter the budget for the player you want to buy :'))

result_attacking_cf=Replacement_cf_attacking(Player,Age,Value)

result_attacking_cf.sort_values('Basic_Cluster',ascending=False)

result_attacking_cf

"""# **CF PASSING**"""

passing_data=pd.read_excel("https://github.com/TazeemKhan9/Football-Player-Replacement/blob/main/Original%20Data/Basic%20Passing.xlsx?raw=true")

passing_data

passing_data['Player'] =passing_data['Player'].str.split('\\', expand=True)[0]

passing_data["Age"] = passing_data["Age"].astype(str)

passing_data["Value_Num"] = passing_data["Value_Num"].astype(str)

passing_data['Short.Att%']=(passing_data['Short.Att']/passing_data['Total.Att'])*100

passing_data['Medium.Att%']=(passing_data['Medium.Att']/passing_data['Total.Att'])*100

passing_data['Long.Att%']=(passing_data['Long.Att']/passing_data['Total.Att'])*100

passing_data['Progressive%']=(passing_data['Prog']/passing_data['Total.Att'])*100

passing_data=passing_data.drop(['Rk','Born','Total.Cmp','Short.Cmp','Medium.Cmp','Long.Cmp','Short.Att','Medium.Att','Long.Att','Prog','1/3rd','A-xA'],axis=1)

passing_data=passing_data[passing_data['90s'] >=10]

passing_data=passing_data.drop('90s',axis=1)

cf_passing = passing_data[passing_data['Pos']=='CF']

cf_passing =cf_passing.dropna() 

cf_passing.reset_index(drop=True,inplace=True)

cf_passing

from sklearn import preprocessing

scaler = preprocessing.MinMaxScaler()

cols=cf_passing.select_dtypes([np.number]).columns

x=cf_passing[cols]

x=x.fillna(0)

x_scaled = scaler.fit_transform(x)

X= pd.DataFrame(x_scaled)

from sklearn.decomposition import PCA

pca=PCA()

reduced_cf_passing=pd.DataFrame(pca.fit_transform(X))

var=pca.explained_variance_ratio_.cumsum()

var

from sklearn.decomposition import PCA

pca = PCA(n_components = 7) # 2D PCA for the plot

reduced_cf_passing = pd.DataFrame(pca.fit_transform(X))

reduced_cf_passing

plt.figure(figsize=(10, 7))  
plt.title("Dendrograms")  
dend = shc.dendrogram(shc.linkage(reduced_cf_passing, method='ward'))

Sum_of_squared_distances = []
K = range(1,15)
for k in K:
    km = KMeans(n_clusters=k)
    km = km.fit(reduced_cf_passing)
    Sum_of_squared_distances.append(km.inertia_)
plt.plot(K, Sum_of_squared_distances, 'bx-')
plt.xlabel('k')
plt.ylabel('Sum_of_squared_distances')
plt.title('Elbow Method For Optimal k')
plt.show()

from sklearn.cluster import KMeans

# specify the number of clusters

kmeans = KMeans(n_clusters=3,random_state=2)

# fit the input data

kmeans = kmeans.fit(reduced_cf_passing)

# get the cluster labels

labels = kmeans.predict(reduced_cf_passing)

# centroid values

centroid = kmeans.cluster_centers_

#cluster values

advance_clusters = kmeans.labels_.tolist()

reduced_cf_passing['Advance_Cluster'] = advance_clusters

reduced_cf_passing['name'] = cf_passing['Player']

reduced_cf_passing.columns = ['PC1','PC2','PC3','PC4','PC5','PC6','PC7','Advance_Cluster', 'Name']

reduced_cf_passing

cf_passing['Advance_Cluster']=advance_clusters

cf_passing_search=cf_passing.sort_values('Advance_Cluster')

import matplotlib as mpl 
import matplotlib.pyplot as plt 
import matplotlib.gridspec as gridspec 
import matplotlib.patheffects as path_effects

#Selecting Team
title_font = "Alegreya Sans"
body_font = "Open Sans"
text_color = "w"
background = "#313332"
filler = "grey"
primary = "red"


fig, ax = plt.subplots(figsize=(20,20))
fig.set_facecolor(background)
ax.patch.set_facecolor(background)

x = reduced_cf_passing.PC1
y = reduced_cf_passing.PC2
txt = reduced_cf_passing.Name
scatter=ax.scatter(x,y,s=120,c=advance_clusters,cmap='Spectral')

legend1 = ax.legend(*scatter.legend_elements(),
                    loc="upper right", title="Classes")
ax.add_artist(legend1)


ax.annotate
fig.text(0.15,0.91,"Goalkeeping Basic Stats",fontweight="bold",fontsize=22, fontfamily=title_font,color=text_color)

fig.text(0.15,0.89,"Top 5 European Leagues",fontweight="regular", fontsize=18,fontfamily=title_font, color=text_color)

for i, txt in enumerate(txt):
    ax.annotate(txt, (x[i], y[i]),color=text_color)

ax.set_xlabel("PC1", fontfamily=title_font, fontweight="bold", fontsize=12, color=text_color)
ax.set_ylabel("PC2", fontfamily=title_font, fontweight="bold", fontsize= 12, color=text_color)

plt.show()

cf_passing_visual=cf_passing_search.sort_values('Advance_Cluster')
cf_passing_visual[cf_passing_visual['Advance_Cluster']==0]

avg_cf_passing=cf_passing_visual[cf_passing_visual['Advance_Cluster']==0].mean(axis=0)

avg_cf_passing=pd.DataFrame(avg_cf_passing)

cf_passing_visual['Advance_Cluster']= cf_passing_visual['Advance_Cluster'].astype(str)

cols=cf_passing_visual.select_dtypes([np.number]).columns

cf_passing_visual['Advance_Cluster']= cf_passing_visual['Advance_Cluster'].astype(int)

avg_cf_passing['Advance_Cluster 0']=cf_passing_visual[cf_passing_visual['Advance_Cluster']==0].mean(axis=0)

avg_cf_passing['Advance_Cluster 1']=cf_passing_visual[cf_passing_visual['Advance_Cluster']==1].mean(axis=0)

avg_cf_passing['Advance_Cluster 2']=cf_passing_visual[cf_passing_visual['Advance_Cluster']==2].mean(axis=0)

#avg_cf_passing['Advance_Cluster 3']=cf_passing_visual[cf_passing_visual['Advance_Cluster']==3].mean(axis=0)

avg_cf_passing.drop(0,axis=1,inplace=True)

avg_cf_passing=avg_cf_passing.drop('Advance_Cluster',axis=0)

avg_cf_passing

heat=cf_passing_visual[cf_passing_visual['Advance_Cluster']==0].mean(axis=0)

heat=pd.DataFrame(heat)

cf_passing_visual['Advance_Cluster']= cf_passing_visual['Advance_Cluster'].astype(str)

cols=cf_passing_visual.select_dtypes([np.number]).columns

cf_passing_visual[cols]=(cf_passing_visual[cols]-cf_passing_visual[cols].min())/(cf_passing_visual[cols].max()-cf_passing_visual[cols].min())

cf_passing_visual['Advance_Cluster']= cf_passing_visual['Advance_Cluster'].astype(int)

heat['Advance_Cluster 0']=cf_passing_visual[cf_passing_visual['Advance_Cluster']==0].mean(axis=0)

heat['Advance_Cluster 1']=cf_passing_visual[cf_passing_visual['Advance_Cluster']==1].mean(axis=0)

heat['Advance_Cluster 2']=cf_passing_visual[cf_passing_visual['Advance_Cluster']==2].mean(axis=0)

#heat['Advance_Cluster 3']=cf_passing_visual[cf_passing_visual['Advance_Cluster']==3].mean(axis=0)

cf_passing_visual['Age']=cf_passing_visual['Age'].astype(float)

cf_passing_visual['Age']=cf_passing_visual['Age'].astype(int)

cf_passing_search['Age']=cf_passing_search['Age'].astype(float)

cf_passing_search['Age']=cf_passing_search['Age'].astype(int)

cf_passing_search['Value_Num']=cf_passing_search['Value_Num'].astype(float)

cf_passing_search = cf_passing_search.dropna()

cf_passing_search['Value_Num']=cf_passing_search['Value_Num'].astype(int)

heat=heat.drop(0,axis=1)

heat=heat.drop('Advance_Cluster',axis=0)

heat

sns.heatmap(heat, cmap="BuGn")

def club_cf_passing(TeamName):
  return cf_passing_search[cf_passing_search['Squad'] == TeamName][['Player','Nation','Pos','Squad','Value','Value_Num','Age','Total.Att','Total.Cmp%','Total.TotDist','Total.PrgDist','Short.Cmp%','Medium.Cmp%','Long.Cmp%','Ast','xA','KP','PPA','CrsPA','Short.Att%','Medium.Att%','Long.Att%','Progressive%'	,'Advance_Cluster']]

def Replacement_cf_passing(Player, age, value):
  
  Advance_Cluster_number=int(cf_passing_search[cf_passing_search['Player']==Player]['Advance_Cluster'])
  
  if Advance_Cluster_number==0:
  
    search_df= cf_passing_search.query('Advance_Cluster == 0 or Advance_Cluster == 2 and Age <= @age and Value_Num <= @value' )
  
  elif Advance_Cluster_number==1:
  
    search_df= cf_passing_search.query('Advance_Cluster == 0 or Advance_Cluster == 2 and Age <= @age and Value_Num <= @value' )
  
  elif Advance_Cluster_number==2:

    search_df= cf_passing_search.query('Advance_Cluster == 0 or Advance_Cluster == 2 and Age <= @age and Value_Num <= @value' )
  
  return search_df

result_passing_cf=Replacement_cf_passing(Player,Age,Value)

result_passing_cf.sort_values('Advance_Cluster',ascending=False)

result_passing_cf

result_passing_cf.drop(['Value','Value_Num','Pos','Squad','Age'],inplace=True,axis=1)

#result_advance['Advance_Cluster']=result_advance['Advance_Cluster'].replace(to_replace =[0,1,2],value =["Ball Playing","Defensive","Mix"])

output_cf = pd.merge(result_passing_cf,result_attacking_cf, how='inner', on='Player')

output_cf

output_cf[['Player','Nation','Pos','Value','Value_Num','Squad','Age','Basic_Cluster','Advance_Cluster']]

reduced_lw.to_excel("pca_lw_basic.xlsx")

